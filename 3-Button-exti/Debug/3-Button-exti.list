
3-Button-exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e08  08007e08  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e10  08007e10  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08007ea8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08007ea8  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aed  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375d  00000000  00000000  00035bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00039310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c76  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ec6  00000000  00000000  00054086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7ca  00000000  00000000  0006af4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  000f9768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007dd4 	.word	0x08007dd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007dd4 	.word	0x08007dd4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc96 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f882 	bl	80005f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f96e 	bl	80007cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f8aa 	bl	8000648 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8d6 	bl	80006a4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f902 	bl	8000700 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f930 	bl	8000760 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f007 f828 	bl	8007554 <MX_USB_HOST_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000504:	f000 f894 	bl	8000630 <MX_NVIC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000508:	f007 f84a 	bl	80075a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x40>)
 8000514:	f000 ffa8 	bl	8001468 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000518:	e7f6      	b.n	8000508 <main+0x2c>
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fb4a 	bl	8007bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xc8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xcc>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000594:	23c0      	movs	r3, #192	; 0xc0
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000598:	2304      	movs	r3, #4
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f9a5 	bl	80038f4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f9ee 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2103      	movs	r1, #3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fc07 	bl	8003de4 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005dc:	f000 f9d8 	bl	8000990 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000606:	2301      	movs	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800060a:	23c8      	movs	r3, #200	; 0xc8
 800060c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060e:	2305      	movs	r3, #5
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fdef 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000624:	f000 f9b4 	bl	8000990 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2043      	movs	r0, #67	; 0x43
 800063a:	f000 fd5a 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800063e:	2043      	movs	r0, #67	; 0x43
 8000640:	f000 fd73 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f002 fb51 	bl	8002d2c <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f97e 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000ac 	.word	0x200000ac
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2S2_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <MX_I2S2_Init+0x58>)
 80006cc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006dc:	2201      	movs	r2, #1
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006e2:	f002 fc67 	bl	8002fb4 <HAL_I2S_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f950 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000100 	.word	0x20000100
 80006f8:	40003800 	.word	0x40003800
 80006fc:	00017700 	.word	0x00017700

08000700 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_I2S3_Init+0x54>)
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_I2S3_Init+0x58>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2S3_Init+0x54>)
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_I2S3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2S3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_I2S3_Init+0x54>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_I2S3_Init+0x54>)
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <MX_I2S3_Init+0x5c>)
 800072a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_I2S3_Init+0x54>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_I2S3_Init+0x54>)
 8000740:	f002 fc38 	bl	8002fb4 <HAL_I2S_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800074a:	f000 f921 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000148 	.word	0x20000148
 8000758:	40003c00 	.word	0x40003c00
 800075c:	00017700 	.word	0x00017700

08000760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_SPI1_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007b2:	f003 fe73 	bl	800449c <HAL_SPI_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 f8e8 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000190 	.word	0x20000190
 80007c8:	40013000 	.word	0x40013000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b65      	ldr	r3, [pc, #404]	; (800097c <MX_GPIO_Init+0x1b0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a64      	ldr	r2, [pc, #400]	; (800097c <MX_GPIO_Init+0x1b0>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b62      	ldr	r3, [pc, #392]	; (800097c <MX_GPIO_Init+0x1b0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b5e      	ldr	r3, [pc, #376]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a5d      	ldr	r2, [pc, #372]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b5b      	ldr	r3, [pc, #364]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b57      	ldr	r3, [pc, #348]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a56      	ldr	r2, [pc, #344]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b54      	ldr	r3, [pc, #336]	; (800097c <MX_GPIO_Init+0x1b0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b50      	ldr	r3, [pc, #320]	; (800097c <MX_GPIO_Init+0x1b0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a4f      	ldr	r2, [pc, #316]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b4d      	ldr	r3, [pc, #308]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a48      	ldr	r2, [pc, #288]	; (800097c <MX_GPIO_Init+0x1b0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b46      	ldr	r3, [pc, #280]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a41      	ldr	r2, [pc, #260]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_GPIO_Init+0x1b0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2108      	movs	r1, #8
 800088e:	483c      	ldr	r0, [pc, #240]	; (8000980 <MX_GPIO_Init+0x1b4>)
 8000890:	f000 fdea 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	483a      	ldr	r0, [pc, #232]	; (8000984 <MX_GPIO_Init+0x1b8>)
 800089a:	f000 fde5 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a4:	4838      	ldr	r0, [pc, #224]	; (8000988 <MX_GPIO_Init+0x1bc>)
 80008a6:	f000 fddf 	bl	8001468 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008aa:	2304      	movs	r3, #4
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4830      	ldr	r0, [pc, #192]	; (8000980 <MX_GPIO_Init+0x1b4>)
 80008be:	f000 fc4f 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <MX_GPIO_Init+0x1b4>)
 80008da:	f000 fc41 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008de:	2332      	movs	r3, #50	; 0x32
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4823      	ldr	r0, [pc, #140]	; (8000980 <MX_GPIO_Init+0x1b4>)
 80008f4:	f000 fc34 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	481d      	ldr	r0, [pc, #116]	; (8000984 <MX_GPIO_Init+0x1b8>)
 8000910:	f000 fc26 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000918:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800091e:	2302      	movs	r3, #2
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_GPIO_Init+0x1c0>)
 800092a:	f000 fc19 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800092e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000932:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4810      	ldr	r0, [pc, #64]	; (8000988 <MX_GPIO_Init+0x1bc>)
 8000948:	f000 fc0a 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800094c:	2320      	movs	r3, #32
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <MX_GPIO_Init+0x1bc>)
 8000960:	f000 fbfe 	bl	8001160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2006      	movs	r0, #6
 800096a:	f000 fbc2 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800096e:	2006      	movs	r0, #6
 8000970:	f000 fbdb 	bl	800112a <HAL_NVIC_EnableIRQ>

}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009da:	2007      	movs	r0, #7
 80009dc:	f000 fb7e 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12c      	bne.n	8000a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <HAL_I2C_MspInit+0x8c>)
 8000a48:	f000 fb8a 	bl	8001160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_I2S_MspInit+0x184>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d15b      	bne.n	8000b56 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a50      	ldr	r2, [pc, #320]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b4e      	ldr	r3, [pc, #312]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a49      	ldr	r2, [pc, #292]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af2:	2304      	movs	r3, #4
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b02:	2306      	movs	r3, #6
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	483e      	ldr	r0, [pc, #248]	; (8000c08 <HAL_I2S_MspInit+0x18c>)
 8000b0e:	f000 fb27 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b12:	2308      	movs	r3, #8
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4836      	ldr	r0, [pc, #216]	; (8000c08 <HAL_I2S_MspInit+0x18c>)
 8000b2e:	f000 fb17 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b44:	2305      	movs	r3, #5
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482f      	ldr	r0, [pc, #188]	; (8000c0c <HAL_I2S_MspInit+0x190>)
 8000b50:	f000 fb06 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b54:	e04f      	b.n	8000bf6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <HAL_I2S_MspInit+0x194>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d14a      	bne.n	8000bf6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_I2S_MspInit+0x188>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <HAL_I2S_MspInit+0x198>)
 8000bd0:	f000 fac6 	bl	8001160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be6:	2306      	movs	r3, #6
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_I2S_MspInit+0x18c>)
 8000bf2:	f000 fab5 	bl	8001160 <HAL_GPIO_Init>
}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40003800 	.word	0x40003800
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40003c00 	.word	0x40003c00
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_SPI_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c72:	23e0      	movs	r3, #224	; 0xe0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c82:	2305      	movs	r3, #5
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f000 fa67 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8de 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fbe5 	bl	80014d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0a:	4802      	ldr	r0, [pc, #8]	; (8000d14 <EXTI0_IRQHandler+0x18>)
 8000d0c:	f000 fbc5 	bl	800149a <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40020c00 	.word	0x40020c00

08000d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <OTG_FS_IRQHandler+0x10>)
 8000d1e:	f000 fe65 	bl	80019ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

/* USER CODE END OTG_FS_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200005cc 	.word	0x200005cc

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f006 fefa 	bl	8007b54 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200001e8 	.word	0x200001e8
 8000d94:	200008e0 	.word	0x200008e0

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 feb9 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fb75 	bl	80004dc <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e00:	08007e18 	.word	0x08007e18
  ldr r2, =_sbss
 8000e04:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e08:	200008e0 	.word	0x200008e0

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fdaa 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200001ec 	.word	0x200001ec

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001ec 	.word	0x200001ec

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e159      	b.n	8001430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8148 	bne.w	800142a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d005      	beq.n	80011b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d130      	bne.n	8001214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d017      	beq.n	8001250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a2 	beq.w	800142a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a49      	ldr	r2, [pc, #292]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x202>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1fe>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_GPIO_Init+0x2f8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1fa>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_GPIO_Init+0x2fc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1f6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_GPIO_Init+0x300>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1f2>
 800134e:	2304      	movs	r3, #4
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001352:	2307      	movs	r3, #7
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f aea2 	bls.w	800117c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	041a      	lsls	r2, r3, #16
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	400b      	ands	r3, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f806 	bl	8001500 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001518:	b08f      	sub	sp, #60	; 0x3c
 800151a:	af0a      	add	r7, sp, #40	; 0x28
 800151c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e054      	b.n	80015d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f006 f864 	bl	8007610 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f893 	bl	8004692 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	687e      	ldr	r6, [r7, #4]
 8001574:	466d      	mov	r5, sp
 8001576:	f106 0410 	add.w	r4, r6, #16
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001586:	e885 0003 	stmia.w	r5, {r0, r1}
 800158a:	1d33      	adds	r3, r6, #4
 800158c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f003 f80d 	bl	80045ae <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f88a 	bl	80046b4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	687e      	ldr	r6, [r7, #4]
 80015a8:	466d      	mov	r5, sp
 80015aa:	f106 0410 	add.w	r4, r6, #16
 80015ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80015be:	1d33      	adds	r3, r6, #4
 80015c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f003 fa12 	bl	80049ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b089      	sub	sp, #36	; 0x24
 80015de:	af04      	add	r7, sp, #16
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	70fb      	strb	r3, [r7, #3]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70bb      	strb	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_HCD_HC_Init+0x28>
 80015fe:	2302      	movs	r3, #2
 8001600:	e076      	b.n	80016f0 <HAL_HCD_HC_Init+0x116>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	212c      	movs	r1, #44	; 0x2c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	333d      	adds	r3, #61	; 0x3d
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	212c      	movs	r1, #44	; 0x2c
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	4413      	add	r3, r2
 8001628:	3338      	adds	r3, #56	; 0x38
 800162a:	787a      	ldrb	r2, [r7, #1]
 800162c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3340      	adds	r3, #64	; 0x40
 800163c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800163e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3339      	adds	r3, #57	; 0x39
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	333f      	adds	r3, #63	; 0x3f
 8001660:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800166e:	b2d0      	uxtb	r0, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	333a      	adds	r3, #58	; 0x3a
 800167c:	4602      	mov	r2, r0
 800167e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da09      	bge.n	800169c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	333b      	adds	r3, #59	; 0x3b
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e008      	b.n	80016ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333b      	adds	r3, #59	; 0x3b
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	333c      	adds	r3, #60	; 0x3c
 80016bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	787c      	ldrb	r4, [r7, #1]
 80016c8:	78ba      	ldrb	r2, [r7, #2]
 80016ca:	78f9      	ldrb	r1, [r7, #3]
 80016cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4623      	mov	r3, r4
 80016de:	f003 fb0b 	bl	8004cf8 <USB_HC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_HCD_HC_Halt+0x1e>
 8001712:	2302      	movs	r3, #2
 8001714:	e00f      	b.n	8001736 <HAL_HCD_HC_Halt+0x3e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fd5b 	bl	80051e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	460b      	mov	r3, r1
 8001754:	70bb      	strb	r3, [r7, #2]
 8001756:	4613      	mov	r3, r2
 8001758:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	333b      	adds	r3, #59	; 0x3b
 8001768:	78ba      	ldrb	r2, [r7, #2]
 800176a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	333f      	adds	r3, #63	; 0x3f
 800177a:	787a      	ldrb	r2, [r7, #1]
 800177c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800177e:	7c3b      	ldrb	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d112      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2203      	movs	r2, #3
 8001794:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	333d      	adds	r3, #61	; 0x3d
 80017a4:	7f3a      	ldrb	r2, [r7, #28]
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e008      	b.n	80017bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3342      	adds	r3, #66	; 0x42
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	f200 80c6 	bhi.w	8001950 <HAL_HCD_HC_SubmitRequest+0x210>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	0800193d 	.word	0x0800193d
 80017d4:	08001841 	.word	0x08001841
 80017d8:	080018bf 	.word	0x080018bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017dc:	7c3b      	ldrb	r3, [r7, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 80b8 	bne.w	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
 80017e4:	78bb      	ldrb	r3, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80b4 	bne.w	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017ec:	8b3b      	ldrh	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3355      	adds	r3, #85	; 0x55
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3355      	adds	r3, #85	; 0x55
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800182a:	e093      	b.n	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	e089      	b.n	8001954 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11d      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3355      	adds	r3, #85	; 0x55
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3342      	adds	r3, #66	; 0x42
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800186c:	e073      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e069      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3354      	adds	r3, #84	; 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e055      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e04b      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018be:	78bb      	ldrb	r3, [r7, #2]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d11d      	bne.n	8001900 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3355      	adds	r3, #85	; 0x55
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ea:	e034      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e02a      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3354      	adds	r3, #84	; 0x54
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3342      	adds	r3, #66	; 0x42
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e016      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e00c      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e002      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001954:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3344      	adds	r3, #68	; 0x44
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	8b3a      	ldrh	r2, [r7, #24]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	202c      	movs	r0, #44	; 0x2c
 8001970:	fb00 f303 	mul.w	r3, r0, r3
 8001974:	440b      	add	r3, r1
 8001976:	334c      	adds	r3, #76	; 0x4c
 8001978:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3360      	adds	r3, #96	; 0x60
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3350      	adds	r3, #80	; 0x50
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3339      	adds	r3, #57	; 0x39
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3361      	adds	r3, #97	; 0x61
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	222c      	movs	r2, #44	; 0x2c
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	18d1      	adds	r1, r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	f003 faae 	bl	8004f3c <USB_HC_StartXfer>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 ffaf 	bl	8004966 <USB_GetMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f040 80f6 	bne.w	8001bfc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 ff93 	bl	8004940 <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80ec 	beq.w	8001bfa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 ff8a 	bl	8004940 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a36:	d104      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 ff7a 	bl	8004940 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 ff6a 	bl	8004940 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 ff5a 	bl	8004940 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d103      	bne.n	8001a9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ff4c 	bl	8004940 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab2:	d11c      	bne.n	8001aee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001abc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ace:	2110      	movs	r1, #16
 8001ad0:	6938      	ldr	r0, [r7, #16]
 8001ad2:	f002 fe3b 	bl	800474c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ad6:	6938      	ldr	r0, [r7, #16]
 8001ad8:	f002 fe6c 	bl	80047b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f842 	bl	8004b6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f005 fe07 	bl	80076fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 ff24 	bl	8004940 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b02:	d102      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 f89e 	bl	8002c46 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 ff16 	bl	8004940 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d106      	bne.n	8001b2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f005 fdd0 	bl	80076c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 ff05 	bl	8004940 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d101      	bne.n	8001b44 <HAL_HCD_IRQHandler+0x158>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_HCD_IRQHandler+0x15a>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0210 	bic.w	r2, r2, #16
 8001b58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 ffa1 	bl	8002aa2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0210 	orr.w	r2, r2, #16
 8001b6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fee3 	bl	8004940 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b84:	d13a      	bne.n	8001bfc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fb18 	bl	80051c0 <USB_HC_ReadInterrupt>
 8001b90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e025      	b.n	8001be4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8ab 	bl	8001d26 <HCD_HC_IN_IRQHandler>
 8001bd0:	e005      	b.n	8001bde <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fbf9 	bl	80023d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3d4      	bcc.n	8001b98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	e000      	b.n	8001bfc <HAL_HCD_IRQHandler+0x210>
      return;
 8001bfa:	bf00      	nop
    }
  }
}
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_HCD_Start+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e013      	b.n	8001c40 <HAL_HCD_Start+0x3e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f804 	bl	8004c34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fd1d 	bl	8004670 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_HCD_Stop+0x16>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e00d      	b.n	8001c7a <HAL_HCD_Stop+0x32>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fbf2 	bl	8005454 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 ffa6 	bl	8004be0 <USB_ResetPort>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3360      	adds	r3, #96	; 0x60
 8001cb8:	781b      	ldrb	r3, [r3, #0]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	681b      	ldr	r3, [r3, #0]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 ffea 	bl	8004cd4 <USB_GetCurrentFrame>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 ffc5 	bl	8004ca6 <USB_GetHostSpeed>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d11a      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	2304      	movs	r3, #4
 8001d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3361      	adds	r3, #97	; 0x61
 8001d76:	2206      	movs	r2, #6
 8001d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fa2c 	bl	80051e2 <USB_HC_Halt>
 8001d8a:	e0af      	b.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d11b      	bne.n	8001ddc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3361      	adds	r3, #97	; 0x61
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fa04 	bl	80051e2 <USB_HC_Halt>
 8001dda:	e087      	b.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d109      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2320      	movs	r3, #32
 8001e02:	6093      	str	r3, [r2, #8]
 8001e04:	e072      	b.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d11a      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3361      	adds	r3, #97	; 0x61
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 f9c9 	bl	80051e2 <USB_HC_Halt>
 8001e50:	e04c      	b.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d11b      	bne.n	8001ea2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3361      	adds	r3, #97	; 0x61
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 f9a1 	bl	80051e2 <USB_HC_Halt>
 8001ea0:	e024      	b.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d119      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3361      	adds	r3, #97	; 0x61
 8001ed8:	2206      	movs	r2, #6
 8001eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f97b 	bl	80051e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d112      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f967 	bl	80051e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	461a      	mov	r2, r3
 8001f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f28:	e24e      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 80df 	bne.w	8002100 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3348      	adds	r3, #72	; 0x48
 8001f58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0159      	lsls	r1, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	202c      	movs	r0, #44	; 0x2c
 8001f74:	fb00 f303 	mul.w	r3, r0, r3
 8001f78:	440b      	add	r3, r1
 8001f7a:	3350      	adds	r3, #80	; 0x50
 8001f7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3361      	adds	r3, #97	; 0x61
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	335c      	adds	r3, #92	; 0x5c
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	333f      	adds	r3, #63	; 0x3f
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d111      	bne.n	8002000 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f8fb 	bl	80051e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	e03a      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	333f      	adds	r3, #63	; 0x3f
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d009      	beq.n	8002028 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002024:	2b01      	cmp	r3, #1
 8002026:	d126      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	0151      	lsls	r1, r2, #5
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	440a      	add	r2, r1
 800203e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002046:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3360      	adds	r3, #96	; 0x60
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	202c      	movs	r0, #44	; 0x2c
 8002064:	fb00 f303 	mul.w	r3, r0, r3
 8002068:	4413      	add	r3, r2
 800206a:	3360      	adds	r3, #96	; 0x60
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f005 fb51 	bl	8007718 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d12b      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	202c      	movs	r0, #44	; 0x2c
 8002094:	fb00 f202 	mul.w	r2, r0, r2
 8002098:	440a      	add	r2, r1
 800209a:	3240      	adds	r2, #64	; 0x40
 800209c:	8812      	ldrh	r2, [r2, #0]
 800209e:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 818e 	beq.w	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3354      	adds	r3, #84	; 0x54
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3354      	adds	r3, #84	; 0x54
 80020d0:	4602      	mov	r2, r0
 80020d2:	701a      	strb	r2, [r3, #0]
}
 80020d4:	e178      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3354      	adds	r3, #84	; 0x54
 80020fa:	4602      	mov	r2, r0
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	e163      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	f040 80f6 	bne.w	8002304 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d109      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3360      	adds	r3, #96	; 0x60
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e0c9      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3361      	adds	r3, #97	; 0x61
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d109      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	2205      	movs	r2, #5
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e0b5      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b06      	cmp	r3, #6
 800217a:	d009      	beq.n	8002190 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218c:	2b08      	cmp	r3, #8
 800218e:	d150      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	335c      	adds	r3, #92	; 0x5c
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	fb00 f303 	mul.w	r3, r0, r3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d912      	bls.n	80021ec <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3360      	adds	r3, #96	; 0x60
 80021e6:	2204      	movs	r2, #4
 80021e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021ea:	e073      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002214:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800221c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002230:	e050      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3361      	adds	r3, #97	; 0x61
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d122      	bne.n	800228c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800226e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002276:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e023      	b.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3361      	adds	r3, #97	; 0x61
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b07      	cmp	r3, #7
 800229e:	d119      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	335c      	adds	r3, #92	; 0x5c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	202c      	movs	r0, #44	; 0x2c
 80022b8:	fb00 f303 	mul.w	r3, r0, r3
 80022bc:	440b      	add	r3, r1
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3360      	adds	r3, #96	; 0x60
 80022d0:	2204      	movs	r2, #4
 80022d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	461a      	mov	r2, r3
 80022e2:	2302      	movs	r3, #2
 80022e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b2d9      	uxtb	r1, r3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	202c      	movs	r0, #44	; 0x2c
 80022f0:	fb00 f303 	mul.w	r3, r0, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3360      	adds	r3, #96	; 0x60
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 fa0b 	bl	8007718 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002302:	e061      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b10      	cmp	r3, #16
 8002318:	d156      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333f      	adds	r3, #63	; 0x3f
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d111      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	335c      	adds	r3, #92	; 0x5c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f002 ff49 	bl	80051e2 <USB_HC_Halt>
 8002350:	e031      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	333f      	adds	r3, #63	; 0x3f
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002376:	2b02      	cmp	r3, #2
 8002378:	d11d      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	335c      	adds	r3, #92	; 0x5c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d110      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 ff16 	bl	80051e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	2310      	movs	r3, #16
 80023c6:	6093      	str	r3, [r2, #8]
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11a      	bne.n	8002436 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2304      	movs	r3, #4
 8002410:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3361      	adds	r3, #97	; 0x61
 8002420:	2206      	movs	r2, #6
 8002422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fed7 	bl	80051e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002434:	e331      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b20      	cmp	r3, #32
 800244a:	d12e      	bne.n	80024aa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	333d      	adds	r3, #61	; 0x3d
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 8313 	bne.w	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	333d      	adds	r3, #61	; 0x3d
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3360      	adds	r3, #96	; 0x60
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fe9d 	bl	80051e2 <USB_HC_Halt>
}
 80024a8:	e2f7      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d112      	bne.n	80024e8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	461a      	mov	r2, r3
 80024d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fe7e 	bl	80051e2 <USB_HC_Halt>
}
 80024e6:	e2d8      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d140      	bne.n	8002580 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d111      	bne.n	800254a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	333d      	adds	r3, #61	; 0x3d
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	461a      	mov	r2, r3
 8002558:	2301      	movs	r3, #1
 800255a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3361      	adds	r3, #97	; 0x61
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fe32 	bl	80051e2 <USB_HC_Halt>
}
 800257e:	e28c      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d12c      	bne.n	80025f0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3361      	adds	r3, #97	; 0x61
 80025a4:	2204      	movs	r2, #4
 80025a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	335c      	adds	r3, #92	; 0x5c
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fe03 	bl	80051e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	2340      	movs	r3, #64	; 0x40
 80025ec:	6093      	str	r3, [r2, #8]
}
 80025ee:	e254      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11a      	bne.n	800263c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2308      	movs	r3, #8
 8002616:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3361      	adds	r3, #97	; 0x61
 8002626:	2205      	movs	r2, #5
 8002628:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fdd4 	bl	80051e2 <USB_HC_Halt>
}
 800263a:	e22e      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b10      	cmp	r3, #16
 8002650:	d140      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	335c      	adds	r3, #92	; 0x5c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3361      	adds	r3, #97	; 0x61
 8002672:	2203      	movs	r2, #3
 8002674:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333d      	adds	r3, #61	; 0x3d
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d112      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	333c      	adds	r3, #60	; 0x3c
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333d      	adds	r3, #61	; 0x3d
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fd91 	bl	80051e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2310      	movs	r3, #16
 80026d0:	6093      	str	r3, [r2, #8]
}
 80026d2:	e1e2      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d164      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d111      	bne.n	8002716 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2206      	movs	r2, #6
 8002702:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fd67 	bl	80051e2 <USB_HC_Halt>
 8002714:	e044      	b.n	80027a0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	202c      	movs	r0, #44	; 0x2c
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	440b      	add	r3, r1
 8002734:	335c      	adds	r3, #92	; 0x5c
 8002736:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	335c      	adds	r3, #92	; 0x5c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d920      	bls.n	800278e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	2204      	movs	r2, #4
 800276e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	b2d9      	uxtb	r1, r3
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	202c      	movs	r0, #44	; 0x2c
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	4413      	add	r3, r2
 8002780:	3360      	adds	r3, #96	; 0x60
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f004 ffc6 	bl	8007718 <HAL_HCD_HC_NotifyURBChange_Callback>
 800278c:	e008      	b.n	80027a0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3360      	adds	r3, #96	; 0x60
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	6093      	str	r3, [r2, #8]
}
 80027b2:	e172      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d11b      	bne.n	8002804 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	2208      	movs	r2, #8
 80027dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fcfa 	bl	80051e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002800:	6093      	str	r3, [r2, #8]
}
 8002802:	e14a      	b.n	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	f040 813f 	bne.w	8002a9a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d17d      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3360      	adds	r3, #96	; 0x60
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	333f      	adds	r3, #63	; 0x3f
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d00a      	beq.n	800286c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	f040 8100 	bne.w	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d113      	bne.n	800289c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3355      	adds	r3, #85	; 0x55
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2d8      	uxtb	r0, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3355      	adds	r3, #85	; 0x55
 8002898:	4602      	mov	r2, r0
 800289a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	f040 80e3 	bne.w	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	334c      	adds	r3, #76	; 0x4c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80d8 	beq.w	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	334c      	adds	r3, #76	; 0x4c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	202c      	movs	r0, #44	; 0x2c
 80028d2:	fb00 f202 	mul.w	r2, r0, r2
 80028d6:	440a      	add	r2, r1
 80028d8:	3240      	adds	r2, #64	; 0x40
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	3b01      	subs	r3, #1
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	202c      	movs	r0, #44	; 0x2c
 80028e6:	fb00 f202 	mul.w	r2, r0, r2
 80028ea:	440a      	add	r2, r1
 80028ec:	3240      	adds	r2, #64	; 0x40
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b5 	beq.w	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3355      	adds	r3, #85	; 0x55
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2d8      	uxtb	r0, r3
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3355      	adds	r3, #85	; 0x55
 8002926:	4602      	mov	r2, r0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e09f      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3361      	adds	r3, #97	; 0x61
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d109      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e08b      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d109      	bne.n	800297c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3360      	adds	r3, #96	; 0x60
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e077      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d109      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	2205      	movs	r2, #5
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e063      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d009      	beq.n	80029cc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d14f      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	202c      	movs	r0, #44	; 0x2c
 80029e4:	fb00 f303 	mul.w	r3, r0, r3
 80029e8:	440b      	add	r3, r1
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d912      	bls.n	8002a28 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3360      	adds	r3, #96	; 0x60
 8002a22:	2204      	movs	r2, #4
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e021      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a50:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a58:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	b2d9      	uxtb	r1, r3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	202c      	movs	r0, #44	; 0x2c
 8002a88:	fb00 f303 	mul.w	r3, r0, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3360      	adds	r3, #96	; 0x60
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f004 fe3f 	bl	8007718 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	0c5b      	lsrs	r3, r3, #17
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d004      	beq.n	8002ae8 <HCD_RXQLVL_IRQHandler+0x46>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	f000 80a9 	beq.w	8002c38 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ae6:	e0aa      	b.n	8002c3e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a6 	beq.w	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3344      	adds	r3, #68	; 0x44
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 809b 	beq.w	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3350      	adds	r3, #80	; 0x50
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	441a      	add	r2, r3
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	202c      	movs	r0, #44	; 0x2c
 8002b20:	fb00 f303 	mul.w	r3, r0, r3
 8002b24:	440b      	add	r3, r1
 8002b26:	334c      	adds	r3, #76	; 0x4c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d87a      	bhi.n	8002c24 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3344      	adds	r3, #68	; 0x44
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	b292      	uxth	r2, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f001 fea2 	bl	8004890 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3344      	adds	r3, #68	; 0x44
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	441a      	add	r2, r3
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	202c      	movs	r0, #44	; 0x2c
 8002b66:	fb00 f303 	mul.w	r3, r0, r3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3350      	adds	r3, #80	; 0x50
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	441a      	add	r2, r3
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	202c      	movs	r0, #44	; 0x2c
 8002b8a:	fb00 f303 	mul.w	r3, r0, r3
 8002b8e:	440b      	add	r3, r1
 8002b90:	3350      	adds	r3, #80	; 0x50
 8002b92:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	0cdb      	lsrs	r3, r3, #19
 8002ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3340      	adds	r3, #64	; 0x40
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d13c      	bne.n	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d039      	beq.n	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3354      	adds	r3, #84	; 0x54
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2d8      	uxtb	r0, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3354      	adds	r3, #84	; 0x54
 8002c1e:	4602      	mov	r2, r0
 8002c20:	701a      	strb	r2, [r3, #0]
      break;
 8002c22:	e00b      	b.n	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3360      	adds	r3, #96	; 0x60
 8002c32:	2204      	movs	r2, #4
 8002c34:	701a      	strb	r2, [r3, #0]
      break;
 8002c36:	e001      	b.n	8002c3c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c3c:	bf00      	nop
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3728      	adds	r7, #40	; 0x28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c72:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d10b      	bne.n	8002c96 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f004 fd29 	bl	80076e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d132      	bne.n	8002d06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d126      	bne.n	8002d00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d113      	bne.n	8002ce2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc4:	d106      	bne.n	8002cd4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2102      	movs	r1, #2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 ff4d 	bl	8004b6c <USB_InitFSLSPClkSel>
 8002cd2:	e011      	b.n	8002cf8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 ff46 	bl	8004b6c <USB_InitFSLSPClkSel>
 8002ce0:	e00a      	b.n	8002cf8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d106      	bne.n	8002cf8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cf6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f004 fd1b 	bl	8007734 <HAL_HCD_PortEnabled_Callback>
 8002cfe:	e002      	b.n	8002d06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f004 fd25 	bl	8007750 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d103      	bne.n	8002d18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6013      	str	r3, [r2, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e12b      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fe4a 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d90:	f001 fa20 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a81      	ldr	r2, [pc, #516]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d807      	bhi.n	8002db0 <HAL_I2C_Init+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a80      	ldr	r2, [pc, #512]	; (8002fa4 <HAL_I2C_Init+0x278>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e006      	b.n	8002dbe <HAL_I2C_Init+0x92>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a7d      	ldr	r2, [pc, #500]	; (8002fa8 <HAL_I2C_Init+0x27c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0e7      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <HAL_I2C_Init+0x280>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d802      	bhi.n	8002e00 <HAL_I2C_Init+0xd4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	e009      	b.n	8002e14 <HAL_I2C_Init+0xe8>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a69      	ldr	r2, [pc, #420]	; (8002fb0 <HAL_I2C_Init+0x284>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3301      	adds	r3, #1
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	495c      	ldr	r1, [pc, #368]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d819      	bhi.n	8002e68 <HAL_I2C_Init+0x13c>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e48:	400b      	ands	r3, r1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_I2C_Init+0x138>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e59      	subs	r1, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	e051      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e04f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <HAL_I2C_Init+0x168>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e012      	b.n	8002eba <HAL_I2C_Init+0x18e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x196>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_I2C_Init+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e58      	subs	r0, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6809      	ldr	r1, [r1, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6911      	ldr	r1, [r2, #16]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	001e847f 	.word	0x001e847f
 8002fa8:	003d08ff 	.word	0x003d08ff
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e128      	b.n	8003218 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_I2S_Init+0x26c>)
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fd fd4b 	bl	8000a7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2202      	movs	r2, #2
 8003008:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d060      	beq.n	80030d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800301a:	2310      	movs	r3, #16
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b20      	cmp	r3, #32
 800302a:	d802      	bhi.n	8003032 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003032:	2001      	movs	r0, #1
 8003034:	f001 f9d2 	bl	80043dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003038:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d125      	bne.n	8003090 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	fbb2 f2f3 	udiv	r2, r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	3305      	adds	r3, #5
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e01f      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fbb2 f2f3 	udiv	r2, r2, r3
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	3305      	adds	r3, #5
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00e      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	3305      	adds	r3, #5
 80030ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4a5c      	ldr	r2, [pc, #368]	; (8003224 <HAL_I2S_Init+0x270>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e003      	b.n	80030dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030d4:	2302      	movs	r3, #2
 80030d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <HAL_I2S_Init+0x134>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d907      	bls.n	80030f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e08f      	b.n	8003218 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	430a      	orrs	r2, r1
 800310a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6851      	ldr	r1, [r2, #4]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6992      	ldr	r2, [r2, #24]
 800312e:	430a      	orrs	r2, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d161      	bne.n	8003208 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_I2S_Init+0x274>)
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_I2S_Init+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_I2S_Init+0x1a4>
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003156:	e001      	b.n	800315c <HAL_I2S_Init+0x1a8>
 8003158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4932      	ldr	r1, [pc, #200]	; (800322c <HAL_I2S_Init+0x278>)
 8003164:	428a      	cmp	r2, r1
 8003166:	d101      	bne.n	800316c <HAL_I2S_Init+0x1b8>
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_I2S_Init+0x27c>)
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x1bc>
 800316c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003170:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003174:	f023 030f 	bic.w	r3, r3, #15
 8003178:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <HAL_I2S_Init+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_I2S_Init+0x1d4>
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003186:	e001      	b.n	800318c <HAL_I2S_Init+0x1d8>
 8003188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800318c:	2202      	movs	r2, #2
 800318e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_I2S_Init+0x278>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_I2S_Init+0x1ea>
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_I2S_Init+0x27c>)
 800319c:	e001      	b.n	80031a2 <HAL_I2S_Init+0x1ee>
 800319e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ae:	d003      	beq.n	80031b8 <HAL_I2S_Init+0x204>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_I2S_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_I2S_Init+0x24c>
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_I2S_Init+0x27c>)
 80031fe:	e001      	b.n	8003204 <HAL_I2S_Init+0x250>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	897a      	ldrh	r2, [r7, #10]
 8003206:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	0800332b 	.word	0x0800332b
 8003224:	cccccccd 	.word	0xcccccccd
 8003228:	08003441 	.word	0x08003441
 800322c:	40003800 	.word	0x40003800
 8003230:	40003400 	.word	0x40003400

08003234 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffb8 	bl	8003234 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	b292      	uxth	r2, r2
 80032e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003312:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff93 	bl	8003248 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b04      	cmp	r3, #4
 8003344:	d13a      	bne.n	80033bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d109      	bne.n	8003364 <I2S_IRQHandler+0x3a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d102      	bne.n	8003364 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb4 	bl	80032cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d126      	bne.n	80033bc <I2S_IRQHandler+0x92>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d11f      	bne.n	80033bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff50 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d136      	bne.n	8003436 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d109      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d102      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff45 	bl	8003270 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d122      	bne.n	8003436 <I2S_IRQHandler+0x10c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d11b      	bne.n	8003436 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff13 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a92      	ldr	r2, [pc, #584]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800345a:	4b92      	ldr	r3, [pc, #584]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800345c:	e001      	b.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a8b      	ldr	r2, [pc, #556]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003478:	4b8a      	ldr	r3, [pc, #552]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800347a:	e001      	b.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d004      	beq.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8099 	bne.w	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f925 	bl	80036fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9c8 	bl	800385c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d13a      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d035      	beq.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034ea:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ec:	e001      	b.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4969      	ldr	r1, [pc, #420]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d101      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034fe:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003500:	e001      	b.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe88 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	f040 80c3 	bne.w	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80bd 	beq.w	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003572:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a49      	ldr	r2, [pc, #292]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800357e:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003580:	e001      	b.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4944      	ldr	r1, [pc, #272]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358e:	428b      	cmp	r3, r1
 8003590:	d101      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003594:	e001      	b.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800359e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe4a 	bl	800325c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c8:	e089      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d107      	bne.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8be 	bl	8003760 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8fd 	bl	80037f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d12f      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02a      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003620:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362e:	e001      	b.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4919      	ldr	r1, [pc, #100]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363c:	428b      	cmp	r3, r1
 800363e:	d101      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003642:	e001      	b.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fdfa 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d136      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d031      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003688:	e001      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4902      	ldr	r1, [pc, #8]	; (80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003696:	428b      	cmp	r3, r1
 8003698:	d106      	bne.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800369a:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369c:	e006      	b.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800369e:	bf00      	nop
 80036a0:	40003800 	.word	0x40003800
 80036a4:	40003400 	.word	0x40003400
 80036a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f043 0204 	orr.w	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fdc0 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036dc:	e000      	b.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036de:	bf00      	nop
}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c99      	adds	r1, r3, #2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6251      	str	r1, [r2, #36]	; 0x24
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffc9 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c99      	adds	r1, r3, #2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6251      	str	r1, [r2, #36]	; 0x24
 8003772:	8819      	ldrh	r1, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <I2SEx_TxISR_I2SExt+0x22>
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 8003780:	e001      	b.n	8003786 <I2SEx_TxISR_I2SExt+0x26>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	460a      	mov	r2, r1
 8003788:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <I2SEx_TxISR_I2SExt+0x50>
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 80037ae:	e001      	b.n	80037b4 <I2SEx_TxISR_I2SExt+0x54>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <I2SEx_TxISR_I2SExt+0x64>
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_TxISR_I2SExt+0x68>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff81 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68d8      	ldr	r0, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	1c99      	adds	r1, r3, #2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003810:	b282      	uxth	r2, r0
 8003812:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d113      	bne.n	8003854 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff4a 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <I2SEx_RxISR_I2SExt+0x16>
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 8003870:	e001      	b.n	8003876 <I2SEx_RxISR_I2SExt+0x1a>
 8003872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003876:	68d8      	ldr	r0, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003882:	b282      	uxth	r2, r0
 8003884:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d121      	bne.n	80038e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <I2SEx_RxISR_I2SExt+0x50>
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 80038aa:	e001      	b.n	80038b0 <I2SEx_RxISR_I2SExt+0x54>
 80038ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	490d      	ldr	r1, [pc, #52]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d101      	bne.n	80038c0 <I2SEx_RxISR_I2SExt+0x64>
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 80038be:	e001      	b.n	80038c4 <I2SEx_RxISR_I2SExt+0x68>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff03 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40003800 	.word	0x40003800
 80038f0:	40003400 	.word	0x40003400

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e267      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e242      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b70      	ldr	r3, [pc, #448]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fa96 	bl	8000edc <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fa92 	bl	8000edc <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e207      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fa82 	bl	8000edc <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fd fa7e 	bl	8000edc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1f3      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c7      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fa37 	bl	8000edc <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd fa33 	bl	8000edc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4925      	ldr	r1, [pc, #148]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fa16 	bl	8000edc <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fa12 	bl	8000edc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e187      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d036      	beq.n	8003b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd f9f6 	bl	8000edc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fd f9f2 	bl	8000edc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e167      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fd f9df 	bl	8000edc <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fd f9db 	bl	8000edc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d907      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e150      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ea      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8097 	beq.w	8003c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a73      	ldr	r2, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd f99b 	bl	8000edc <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fd f997 	bl	8000edc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e10c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ea>
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd f95c 	bl	8000edc <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd f958 	bl	8000edc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0cb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fd f946 	bl	8000edc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fd f942 	bl	8000edc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0b5      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a1 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d05c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d141      	bne.n	8003d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd f916 	bl	8000edc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd f912 	bl	8000edc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd f8eb 	bl	8000edc <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd f8e7 	bl	8000edc <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e05c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x416>
 8003d28:	e054      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fd f8d4 	bl	8000edc <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fd f8d0 	bl	8000edc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e045      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
 8003d56:	e03d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4ec>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd f802 	bl	8000edc <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fc fffe 	bl	8000edc <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc ff62 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08007df0 	.word	0x08007df0
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b094      	sub	sp, #80	; 0x50
 8003fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4b79      	ldr	r3, [pc, #484]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f200 80e1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe2:	e0db      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b73      	ldr	r3, [pc, #460]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fe8:	e0db      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fee:	e0d8      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004034:	0150      	lsls	r0, r2, #5
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4621      	mov	r1, r4
 800403c:	1a51      	subs	r1, r2, r1
 800403e:	6139      	str	r1, [r7, #16]
 8004040:	4629      	mov	r1, r5
 8004042:	eb63 0301 	sbc.w	r3, r3, r1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004054:	4659      	mov	r1, fp
 8004056:	018b      	lsls	r3, r1, #6
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405e:	4651      	mov	r1, sl
 8004060:	018a      	lsls	r2, r1, #6
 8004062:	4651      	mov	r1, sl
 8004064:	ebb2 0801 	subs.w	r8, r2, r1
 8004068:	4659      	mov	r1, fp
 800406a:	eb63 0901 	sbc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	462b      	mov	r3, r5
 8004090:	eb49 0303 	adc.w	r3, r9, r3
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040a2:	4629      	mov	r1, r5
 80040a4:	024b      	lsls	r3, r1, #9
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040ac:	4621      	mov	r1, r4
 80040ae:	024a      	lsls	r2, r1, #9
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c0:	f7fc f88a 	bl	80001d8 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	e058      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	4611      	mov	r1, r2
 80040da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
 80040e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fa:	0150      	lsls	r0, r2, #5
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4641      	mov	r1, r8
 8004102:	ebb2 0a01 	subs.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb63 0b01 	sbc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800411c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004120:	ebb2 040a 	subs.w	r4, r2, sl
 8004124:	eb63 050b 	sbc.w	r5, r3, fp
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	00eb      	lsls	r3, r5, #3
 8004132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004136:	00e2      	lsls	r2, r4, #3
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	4643      	mov	r3, r8
 800413e:	18e3      	adds	r3, r4, r3
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	464b      	mov	r3, r9
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004174:	f7fc f830 	bl	80001d8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3750      	adds	r7, #80	; 0x50
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff0 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08007e00 	.word	0x08007e00

080041fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004220:	2b00      	cmp	r3, #0
 8004222:	d038      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004224:	4b68      	ldr	r3, [pc, #416]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800422a:	f7fc fe57 	bl	8000edc <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004232:	f7fc fe53 	bl	8000edc <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0bd      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	071b      	lsls	r3, r3, #28
 8004262:	495a      	ldr	r1, [pc, #360]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800426a:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004270:	f7fc fe34 	bl	8000edc <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004278:	f7fc fe30 	bl	8000edc <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e09a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428a:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8083 	beq.w	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	4b48      	ldr	r3, [pc, #288]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b2:	6413      	str	r3, [r2, #64]	; 0x40
 80042b4:	4b45      	ldr	r3, [pc, #276]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a42      	ldr	r2, [pc, #264]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fc fe06 	bl	8000edc <HAL_GetTick>
 80042d0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fc fe02 	bl	8000edc <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e06c      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e6:	4b3a      	ldr	r3, [pc, #232]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02f      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d028      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004320:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004326:	4a29      	ldr	r2, [pc, #164]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d114      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004338:	f7fc fdd0 	bl	8000edc <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fc fdcc 	bl	8000edc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e034      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ee      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d10d      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004370:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	4911      	ldr	r1, [pc, #68]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
 800438a:	e005      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004396:	6093      	str	r3, [r2, #8]
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	4909      	ldr	r1, [pc, #36]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7d1a      	ldrb	r2, [r3, #20]
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80043bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	42470068 	.word	0x42470068
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40007000 	.word	0x40007000
 80043d4:	42470e40 	.word	0x42470e40
 80043d8:	424711e0 	.word	0x424711e0

080043dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d140      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d131      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004412:	617b      	str	r3, [r7, #20]
          break;
 8004414:	e031      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	e008      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004442:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800444c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	fb02 f303 	mul.w	r3, r2, r3
 800445c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	0f1b      	lsrs	r3, r3, #28
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
          break;
 8004472:	e002      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
          break;
 8004478:	bf00      	nop
        }
      }
      break;
 800447a:	bf00      	nop
    }
  }
  return frequency;
 800447c:	697b      	ldr	r3, [r7, #20]
}
 800447e:	4618      	mov	r0, r3
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00bb8000 	.word	0x00bb8000
 8004494:	007a1200 	.word	0x007a1200
 8004498:	00f42400 	.word	0x00f42400

0800449c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07b      	b.n	80045a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d108      	bne.n	80044c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044be:	d009      	beq.n	80044d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
 80044c6:	e005      	b.n	80044d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fb92 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	ea42 0103 	orr.w	r1, r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0104 	and.w	r1, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0210 	and.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045ae:	b084      	sub	sp, #16
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	f107 001c 	add.w	r0, r7, #28
 80045bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d122      	bne.n	800460c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9bf 	bl	8004984 <USB_CoreReset>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	e01a      	b.n	8004642 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f9b3 	bl	8004984 <USB_CoreReset>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
 8004634:	e005      	b.n	8004642 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10b      	bne.n	8004660 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f043 0206 	orr.w	r2, r3, #6
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800466c:	b004      	add	sp, #16
 800466e:	4770      	bx	lr

08004670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d115      	bne.n	8004702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f7fc fc06 	bl	8000ef4 <HAL_Delay>
      ms++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f939 	bl	8004966 <USB_GetMode>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d01e      	beq.n	8004738 <USB_SetCurrentMode+0x84>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b31      	cmp	r3, #49	; 0x31
 80046fe:	d9f0      	bls.n	80046e2 <USB_SetCurrentMode+0x2e>
 8004700:	e01a      	b.n	8004738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d115      	bne.n	8004734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004714:	2001      	movs	r0, #1
 8004716:	f7fc fbed 	bl	8000ef4 <HAL_Delay>
      ms++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f920 	bl	8004966 <USB_GetMode>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <USB_SetCurrentMode+0x84>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b31      	cmp	r3, #49	; 0x31
 8004730:	d9f0      	bls.n	8004714 <USB_SetCurrentMode+0x60>
 8004732:	e001      	b.n	8004738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e005      	b.n	8004744 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b32      	cmp	r3, #50	; 0x32
 800473c:	d101      	bne.n	8004742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <USB_FlushTxFifo+0x64>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e01b      	b.n	80047a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	daf2      	bge.n	800475a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3301      	adds	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <USB_FlushTxFifo+0x64>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e006      	b.n	80047a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d0f0      	beq.n	8004784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	00030d40 	.word	0x00030d40

080047b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a11      	ldr	r2, [pc, #68]	; (8004810 <USB_FlushRxFifo+0x5c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e018      	b.n	8004804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	daf2      	bge.n	80047c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2210      	movs	r2, #16
 80047e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a08      	ldr	r2, [pc, #32]	; (8004810 <USB_FlushRxFifo+0x5c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d0f0      	beq.n	80047e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	00030d40 	.word	0x00030d40

08004814 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4611      	mov	r1, r2
 8004820:	461a      	mov	r2, r3
 8004822:	460b      	mov	r3, r1
 8004824:	71fb      	strb	r3, [r7, #7]
 8004826:	4613      	mov	r3, r2
 8004828:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d123      	bne.n	8004882 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800483a:	88bb      	ldrh	r3, [r7, #4]
 800483c:	3303      	adds	r3, #3
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e018      	b.n	800487a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	031a      	lsls	r2, r3, #12
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4413      	add	r3, r2
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	461a      	mov	r2, r3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3301      	adds	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3e2      	bcc.n	8004848 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3724      	adds	r7, #36	; 0x24
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004890:	b480      	push	{r7}
 8004892:	b08b      	sub	sp, #44	; 0x2c
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	e014      	b.n	80048e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	3301      	adds	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	3301      	adds	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	3301      	adds	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	3301      	adds	r3, #1
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	6a3a      	ldr	r2, [r7, #32]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3e6      	bcc.n	80048bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ee:	8bfb      	ldrh	r3, [r7, #30]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01e      	beq.n	8004932 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	461a      	mov	r2, r3
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	b2da      	uxtb	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	701a      	strb	r2, [r3, #0]
      i++;
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	3301      	adds	r3, #1
 800491e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004926:	8bfb      	ldrh	r3, [r7, #30]
 8004928:	3b01      	subs	r3, #1
 800492a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800492c:	8bfb      	ldrh	r3, [r7, #30]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ea      	bne.n	8004908 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004934:	4618      	mov	r0, r3
 8004936:	372c      	adds	r7, #44	; 0x2c
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0301 	and.w	r3, r3, #1
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <USB_CoreReset+0x64>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e01b      	b.n	80049da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <USB_CoreReset+0x64>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d0f0      	beq.n	80049ba <USB_CoreReset+0x36>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	00030d40 	.word	0x00030d40

080049ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d018      	beq.n	8004a74 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10a      	bne.n	8004a5e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e014      	b.n	8004a88 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e009      	b.n	8004a88 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a82:	f023 0304 	bic.w	r3, r3, #4
 8004a86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a88:	2110      	movs	r1, #16
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fe5e 	bl	800474c <USB_FlushTxFifo>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fe8a 	bl	80047b4 <USB_FlushRxFifo>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e015      	b.n	8004adc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abc:	461a      	mov	r2, r3
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3e5      	bcc.n	8004ab0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295
 8004af0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <USB_HostInit+0x16c>)
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <USB_HostInit+0x170>)
 8004b10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b14:	e009      	b.n	8004b2a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <USB_HostInit+0x174>)
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <USB_HostInit+0x178>)
 8004b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <USB_HostInit+0x17c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr
 8004b58:	01000200 	.word	0x01000200
 8004b5c:	00e00300 	.word	0x00e00300
 8004b60:	00600080 	.word	0x00600080
 8004b64:	004000e0 	.word	0x004000e0
 8004b68:	a3200008 	.word	0xa3200008

08004b6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bba:	6053      	str	r3, [r2, #4]
 8004bbc:	e009      	b.n	8004bd2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d106      	bne.n	8004bd2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bd0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	f7fc f96f 	bl	8000ef4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c24:	200a      	movs	r0, #10
 8004c26:	f7fc f965 	bl	8000ef4 <HAL_Delay>

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <USB_DriveVbus+0x44>
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d106      	bne.n	8004c78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d109      	bne.n	8004c98 <USB_DriveVbus+0x64>
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	0c5b      	lsrs	r3, r3, #17
 8004cc4:	f003 0303 	and.w	r3, r3, #3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	b29b      	uxth	r3, r3
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	70fb      	strb	r3, [r7, #3]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	70bb      	strb	r3, [r7, #2]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	461a      	mov	r2, r3
 8004d28:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d87e      	bhi.n	8004e34 <USB_HC_Init+0x13c>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <USB_HC_Init+0x44>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004df7 	.word	0x08004df7
 8004d44:	08004d4d 	.word	0x08004d4d
 8004d48:	08004db9 	.word	0x08004db9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da10      	bge.n	8004d8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d88:	e057      	b.n	8004e3a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d051      	beq.n	8004e3a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db4:	60d3      	str	r3, [r2, #12]
      break;
 8004db6:	e040      	b.n	8004e3a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da34      	bge.n	8004e3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004df4:	e023      	b.n	8004e3e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	461a      	mov	r2, r3
 8004e04:	f240 2325 	movw	r3, #549	; 0x225
 8004e08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da17      	bge.n	8004e42 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e30:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e32:	e006      	b.n	8004e42 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	77fb      	strb	r3, [r7, #31]
      break;
 8004e38:	e004      	b.n	8004e44 <USB_HC_Init+0x14c>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e002      	b.n	8004e44 <USB_HC_Init+0x14c>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <USB_HC_Init+0x14c>
      break;
 8004e42:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	6939      	ldr	r1, [r7, #16]
 8004e7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	da03      	bge.n	8004e9e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e001      	b.n	8004ea2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff feff 	bl	8004ca6 <USB_GetHostSpeed>
 8004ea8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d106      	bne.n	8004ec0 <USB_HC_Init+0x1c8>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d003      	beq.n	8004ec0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e001      	b.n	8004ec4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ec4:	787b      	ldrb	r3, [r7, #1]
 8004ec6:	059b      	lsls	r3, r3, #22
 8004ec8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ecc:	78bb      	ldrb	r3, [r7, #2]
 8004ece:	02db      	lsls	r3, r3, #11
 8004ed0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ed4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eda:	049b      	lsls	r3, r3, #18
 8004edc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ee0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ee2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ee8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	0159      	lsls	r1, r3, #5
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	440b      	add	r3, r1
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f00:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d003      	beq.n	8004f12 <USB_HC_Init+0x21a>
 8004f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10f      	bne.n	8004f32 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f30:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f58:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02d      	beq.n	8004fc2 <USB_HC_StartXfer+0x86>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d129      	bne.n	8004fc2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d117      	bne.n	8004fa4 <USB_HC_StartXfer+0x68>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	79db      	ldrb	r3, [r3, #7]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <USB_HC_StartXfer+0x48>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	79db      	ldrb	r3, [r3, #7]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d10f      	bne.n	8004fa4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <USB_HC_StartXfer+0x86>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	795b      	ldrb	r3, [r3, #5]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fa0f 	bl	80053dc <USB_DoPing>
      return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e0f8      	b.n	80051b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	8912      	ldrh	r2, [r2, #8]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	8912      	ldrh	r2, [r2, #8]
 8004fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fde:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fe0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fe2:	8b7b      	ldrh	r3, [r7, #26]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d90b      	bls.n	8005000 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004fe8:	8b7b      	ldrh	r3, [r7, #26]
 8004fea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	8912      	ldrh	r2, [r2, #8]
 8004ff2:	fb03 f202 	mul.w	r2, r3, r2
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	e001      	b.n	8005000 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	78db      	ldrb	r3, [r3, #3]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	8912      	ldrh	r2, [r2, #8]
 800500e:	fb03 f202 	mul.w	r2, r3, r2
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	611a      	str	r2, [r3, #16]
 8005016:	e003      	b.n	8005020 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800502a:	04d9      	lsls	r1, r3, #19
 800502c:	4b63      	ldr	r3, [pc, #396]	; (80051bc <USB_HC_StartXfer+0x280>)
 800502e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005030:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	7a9b      	ldrb	r3, [r3, #10]
 8005036:	075b      	lsls	r3, r3, #29
 8005038:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	0148      	lsls	r0, r1, #5
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	4401      	add	r1, r0
 8005044:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005048:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800504a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	460a      	mov	r2, r1
 8005064:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	440a      	add	r2, r1
 8005094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800509c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	7e7b      	ldrb	r3, [r7, #25]
 80050ae:	075b      	lsls	r3, r3, #29
 80050b0:	69f9      	ldr	r1, [r7, #28]
 80050b2:	0148      	lsls	r0, r1, #5
 80050b4:	6a39      	ldr	r1, [r7, #32]
 80050b6:	4401      	add	r1, r0
 80050b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e003      	b.n	80050f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	461a      	mov	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e04e      	b.n	80051b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	78db      	ldrb	r3, [r3, #3]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d149      	bne.n	80051b2 <USB_HC_StartXfer+0x276>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d045      	beq.n	80051b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	79db      	ldrb	r3, [r3, #7]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d830      	bhi.n	8005190 <USB_HC_StartXfer+0x254>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <USB_HC_StartXfer+0x1f8>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005145 	.word	0x08005145
 8005138:	08005169 	.word	0x08005169
 800513c:	08005145 	.word	0x08005145
 8005140:	08005169 	.word	0x08005169
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	3303      	adds	r3, #3
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800514e:	8afa      	ldrh	r2, [r7, #22]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	b29b      	uxth	r3, r3
 8005156:	429a      	cmp	r2, r3
 8005158:	d91c      	bls.n	8005194 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]
        }
        break;
 8005166:	e015      	b.n	8005194 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	3303      	adds	r3, #3
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005172:	8afa      	ldrh	r2, [r7, #22]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	b29b      	uxth	r3, r3
 800517e:	429a      	cmp	r2, r3
 8005180:	d90a      	bls.n	8005198 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	619a      	str	r2, [r3, #24]
        }
        break;
 800518e:	e003      	b.n	8005198 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <USB_HC_StartXfer+0x25e>
        break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <USB_HC_StartXfer+0x25e>
        break;
 8005198:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68d9      	ldr	r1, [r3, #12]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785a      	ldrb	r2, [r3, #1]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2000      	movs	r0, #0
 80051aa:	9000      	str	r0, [sp, #0]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fb31 	bl	8004814 <USB_WritePacket>
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	; 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	1ff80000 	.word	0x1ff80000

080051c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	b29b      	uxth	r3, r3
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b089      	sub	sp, #36	; 0x24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	0c9b      	lsrs	r3, r3, #18
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	0fdb      	lsrs	r3, r3, #31
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d104      	bne.n	800523c <USB_HC_Halt+0x5a>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e0c8      	b.n	80053ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <USB_HC_Halt+0x66>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d163      	bne.n	8005310 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005266:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 80ab 	bne.w	80053cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d133      	bne.n	80052ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	440a      	add	r2, r1
 8005298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ce:	d81d      	bhi.n	800530c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e6:	d0ec      	beq.n	80052c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052e8:	e070      	b.n	80053cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005308:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800530a:	e05f      	b.n	80053cc <USB_HC_Halt+0x1ea>
            break;
 800530c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800530e:	e05d      	b.n	80053cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800532e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d133      	bne.n	80053a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800535e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800538c:	d81d      	bhi.n	80053ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a4:	d0ec      	beq.n	8005380 <USB_HC_Halt+0x19e>
 80053a6:	e011      	b.n	80053cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e000      	b.n	80053cc <USB_HC_Halt+0x1ea>
          break;
 80053ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	; 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053f0:	2301      	movs	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	04da      	lsls	r2, r3, #19
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <USB_DoPing+0x74>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	440a      	add	r2, r1
 8005404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800540c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005424:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	1ff80000 	.word	0x1ff80000

08005454 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff f912 	bl	8004692 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546e:	2110      	movs	r1, #16
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff f96b 	bl	800474c <USB_FlushTxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff f997 	bl	80047b4 <USB_FlushRxFifo>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e01f      	b.n	80054d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	461a      	mov	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d9dc      	bls.n	8005496 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e034      	b.n	800554c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005500:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005508:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	461a      	mov	r2, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005528:	d80c      	bhi.n	8005544 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005540:	d0ec      	beq.n	800551c <USB_StopHost+0xc8>
 8005542:	e000      	b.n	8005546 <USB_StopHost+0xf2>
        break;
 8005544:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3301      	adds	r3, #1
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b0f      	cmp	r3, #15
 8005550:	d9c7      	bls.n	80054e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005558:	461a      	mov	r2, r3
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff f881 	bl	8004670 <USB_EnableGlobalInt>

  return ret;
 800556e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af04      	add	r7, sp, #16
 800557e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005580:	2301      	movs	r3, #1
 8005582:	2202      	movs	r2, #2
 8005584:	2102      	movs	r1, #2
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fc66 	bl	8005e58 <USBH_FindInterface>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2bff      	cmp	r3, #255	; 0xff
 8005594:	d002      	beq.n	800559c <USBH_CDC_InterfaceInit+0x24>
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d901      	bls.n	80055a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800559c:	2302      	movs	r3, #2
 800559e:	e13d      	b.n	800581c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fc3b 	bl	8005e20 <USBH_SelectInterface>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	e131      	b.n	800581c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055be:	2050      	movs	r0, #80	; 0x50
 80055c0:	f002 faf2 	bl	8007ba8 <malloc>
 80055c4:	4603      	mov	r3, r0
 80055c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055d8:	2302      	movs	r3, #2
 80055da:	e11f      	b.n	800581c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055dc:	2250      	movs	r2, #80	; 0x50
 80055de:	2100      	movs	r1, #0
 80055e0:	68b8      	ldr	r0, [r7, #8]
 80055e2:	f002 faf1 	bl	8007bc8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	211a      	movs	r1, #26
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da15      	bge.n	800562a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	211a      	movs	r1, #26
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	211a      	movs	r1, #26
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 ff2c 	bl	800748e <USBH_AllocPipe>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	7819      	ldrb	r1, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	7858      	ldrb	r0, [r3, #1]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	8952      	ldrh	r2, [r2, #10]
 8005656:	9202      	str	r2, [sp, #8]
 8005658:	2203      	movs	r2, #3
 800565a:	9201      	str	r2, [sp, #4]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4623      	mov	r3, r4
 8005660:	4602      	mov	r2, r0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fee4 	bl	8007430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 f9eb 	bl	8007a4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005676:	2300      	movs	r3, #0
 8005678:	2200      	movs	r2, #0
 800567a:	210a      	movs	r1, #10
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fbeb 	bl	8005e58 <USBH_FindInterface>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2bff      	cmp	r3, #255	; 0xff
 800568a:	d002      	beq.n	8005692 <USBH_CDC_InterfaceInit+0x11a>
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d901      	bls.n	8005696 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005692:	2302      	movs	r3, #2
 8005694:	e0c2      	b.n	800581c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	211a      	movs	r1, #26
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da16      	bge.n	80056dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	211a      	movs	r1, #26
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	211a      	movs	r1, #26
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	835a      	strh	r2, [r3, #26]
 80056da:	e015      	b.n	8005708 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	211a      	movs	r1, #26
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	211a      	movs	r1, #26
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	211a      	movs	r1, #26
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	4413      	add	r3, r2
 8005714:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	b25b      	sxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	da16      	bge.n	800574e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	211a      	movs	r1, #26
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	211a      	movs	r1, #26
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	4413      	add	r3, r2
 8005742:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	835a      	strh	r2, [r3, #26]
 800574c:	e015      	b.n	800577a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	211a      	movs	r1, #26
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	4413      	add	r3, r2
 8005770:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	7b9b      	ldrb	r3, [r3, #14]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fe84 	bl	800748e <USBH_AllocPipe>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	7bdb      	ldrb	r3, [r3, #15]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fe7a 	bl	800748e <USBH_AllocPipe>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	7b59      	ldrb	r1, [r3, #13]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	7b98      	ldrb	r0, [r3, #14]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	8b12      	ldrh	r2, [r2, #24]
 80057ba:	9202      	str	r2, [sp, #8]
 80057bc:	2202      	movs	r2, #2
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4623      	mov	r3, r4
 80057c4:	4602      	mov	r2, r0
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 fe32 	bl	8007430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	7b19      	ldrb	r1, [r3, #12]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	7bd8      	ldrb	r0, [r3, #15]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	8b52      	ldrh	r2, [r2, #26]
 80057e4:	9202      	str	r2, [sp, #8]
 80057e6:	2202      	movs	r2, #2
 80057e8:	9201      	str	r2, [sp, #4]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4623      	mov	r3, r4
 80057ee:	4602      	mov	r2, r0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fe1d 	bl	8007430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	7b5b      	ldrb	r3, [r3, #13]
 8005802:	2200      	movs	r2, #0
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f002 f920 	bl	8007a4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	7b1b      	ldrb	r3, [r3, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f002 f919 	bl	8007a4c <USBH_LL_SetToggle>

  return USBH_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bd90      	pop	{r4, r7, pc}

08005824 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fe12 	bl	800746e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fe3d 	bl	80074d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	7b1b      	ldrb	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	7b1b      	ldrb	r3, [r3, #12]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fdff 	bl	800746e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fe2a 	bl	80074d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	7b5b      	ldrb	r3, [r3, #13]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	7b5b      	ldrb	r3, [r3, #13]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 fdec 	bl	800746e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7b5b      	ldrb	r3, [r3, #13]
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fe17 	bl	80074d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 f97b 	bl	8007bb8 <free>
    phost->pActiveClass->pData = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c8:	2200      	movs	r2, #0
 80058ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3340      	adds	r3, #64	; 0x40
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8b1 	bl	8005a56 <GetLineCoding>
 80058f4:	4603      	mov	r3, r0
 80058f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d105      	bne.n	800590a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005904:	2102      	movs	r1, #2
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800590a:	7afb      	ldrb	r3, [r7, #11]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005934:	2b04      	cmp	r3, #4
 8005936:	d877      	bhi.n	8005a28 <USBH_CDC_Process+0x114>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <USBH_CDC_Process+0x2c>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005955 	.word	0x08005955
 8005944:	0800595b 	.word	0x0800595b
 8005948:	0800598b 	.word	0x0800598b
 800594c:	080059ff 	.word	0x080059ff
 8005950:	08005a0d 	.word	0x08005a0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
      break;
 8005958:	e06d      	b.n	8005a36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f897 	bl	8005a94 <SetLineCoding>
 8005966:	4603      	mov	r3, r0
 8005968:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005978:	e058      	b.n	8005a2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d055      	beq.n	8005a2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2204      	movs	r2, #4
 8005984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005988:	e050      	b.n	8005a2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3340      	adds	r3, #64	; 0x40
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f860 	bl	8005a56 <GetLineCoding>
 8005996:	4603      	mov	r3, r0
 8005998:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d126      	bne.n	80059ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d13b      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d133      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d12b      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d124      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f958 	bl	8005c9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059ec:	e020      	b.n	8005a30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d01d      	beq.n	8005a30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2204      	movs	r2, #4
 80059f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059fc:	e018      	b.n	8005a30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f867 	bl	8005ad2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8da 	bl	8005bbe <CDC_ProcessReception>
      break;
 8005a0a:	e014      	b.n	8005a36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 ffef 	bl	80069f2 <USBH_ClrFeature>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a26:	e005      	b.n	8005a34 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <USBH_CDC_Process+0x122>
      break;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <USBH_CDC_Process+0x122>
      break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <USBH_CDC_Process+0x122>
      break;
 8005a34:	bf00      	nop

  }

  return status;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	22a1      	movs	r2, #161	; 0xa1
 8005a64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2207      	movs	r2, #7
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 fa81 	bl	8006f8c <USBH_CtlReq>
 8005a8a:	4603      	mov	r3, r0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2221      	movs	r2, #33	; 0x21
 8005aa2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2207      	movs	r2, #7
 8005aba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2207      	movs	r2, #7
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fa62 	bl	8006f8c <USBH_CtlReq>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af02      	add	r7, sp, #8
 8005ad8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <CDC_ProcessTransmission+0x26>
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d023      	beq.n	8005b3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005af6:	e05e      	b.n	8005bb6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	8b12      	ldrh	r2, [r2, #24]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d90b      	bls.n	8005b1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8b1a      	ldrh	r2, [r3, #24]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	7b5b      	ldrb	r3, [r3, #13]
 8005b10:	2001      	movs	r0, #1
 8005b12:	9000      	str	r0, [sp, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fc48 	bl	80073aa <USBH_BulkSendData>
 8005b1a:	e00b      	b.n	8005b34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	7b5b      	ldrb	r3, [r3, #13]
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	9000      	str	r0, [sp, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fc3b 	bl	80073aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b3c:	e03b      	b.n	8005bb6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	7b5b      	ldrb	r3, [r3, #13]
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 ff57 	bl	80079f8 <USBH_LL_GetURBState>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d128      	bne.n	8005ba6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	8b12      	ldrh	r2, [r2, #24]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d90e      	bls.n	8005b7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	8b12      	ldrh	r2, [r2, #24]
 8005b68:	1a9a      	subs	r2, r3, r2
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	8b12      	ldrh	r2, [r2, #24]
 8005b76:	441a      	add	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	61da      	str	r2, [r3, #28]
 8005b7c:	e002      	b.n	8005b84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b94:	e00e      	b.n	8005bb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f868 	bl	8005c74 <USBH_CDC_TransmitCallback>
      break;
 8005ba4:	e006      	b.n	8005bb4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d103      	bne.n	8005bb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bb4:	bf00      	nop
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d002      	beq.n	8005be4 <CDC_ProcessReception+0x26>
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00e      	beq.n	8005c00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005be2:	e043      	b.n	8005c6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6a19      	ldr	r1, [r3, #32]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	8b5a      	ldrh	r2, [r3, #26]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	7b1b      	ldrb	r3, [r3, #12]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fbff 	bl	80073f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bfe:	e035      	b.n	8005c6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	7b1b      	ldrb	r3, [r3, #12]
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fef6 	bl	80079f8 <USBH_LL_GetURBState>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d129      	bne.n	8005c6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	7b1b      	ldrb	r3, [r3, #12]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fe59 	bl	80078d4 <USBH_LL_GetLastXferSize>
 8005c22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d016      	beq.n	8005c5c <CDC_ProcessReception+0x9e>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	8b5b      	ldrh	r3, [r3, #26]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d910      	bls.n	8005c5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad2      	subs	r2, r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2203      	movs	r2, #3
 8005c56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c5a:	e006      	b.n	8005c6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f80f 	bl	8005c88 <USBH_CDC_ReceiveCallback>
      break;
 8005c6a:	bf00      	nop
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e029      	b.n	8005d1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	79fa      	ldrb	r2, [r7, #7]
 8005ccc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f81f 	bl	8005d24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f001 fd29 	bl	800776c <USBH_LL_Init>

  return USBH_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e009      	b.n	8005d4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	33e0      	adds	r3, #224	; 0xe0
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b0f      	cmp	r3, #15
 8005d4e:	d9f2      	bls.n	8005d36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e009      	b.n	8005d6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d3f1      	bcc.n	8005d56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2240      	movs	r2, #64	; 0x40
 8005d96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d016      	beq.n	8005e0e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10e      	bne.n	8005e08 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	33de      	adds	r3, #222	; 0xde
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e004      	b.n	8005e12 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e001      	b.n	8005e12 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d204      	bcs.n	8005e46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e44:	e001      	b.n	8005e4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e46:	2302      	movs	r3, #2
 8005e48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	70fb      	strb	r3, [r7, #3]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70bb      	strb	r3, [r7, #2]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e82:	e025      	b.n	8005ed0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	221a      	movs	r2, #26
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	3302      	adds	r3, #2
 8005e94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	795b      	ldrb	r3, [r3, #5]
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d002      	beq.n	8005ea6 <USBH_FindInterface+0x4e>
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2bff      	cmp	r3, #255	; 0xff
 8005ea4:	d111      	bne.n	8005eca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005eaa:	78ba      	ldrb	r2, [r7, #2]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d002      	beq.n	8005eb6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005eb0:	78bb      	ldrb	r3, [r7, #2]
 8005eb2:	2bff      	cmp	r3, #255	; 0xff
 8005eb4:	d109      	bne.n	8005eca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005eba:	787a      	ldrb	r2, [r7, #1]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d002      	beq.n	8005ec6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2bff      	cmp	r3, #255	; 0xff
 8005ec4:	d101      	bne.n	8005eca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	e006      	b.n	8005ed8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d9d6      	bls.n	8005e84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ed6:	23ff      	movs	r3, #255	; 0xff
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fc79 	bl	80077e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fd92 	bl	8007a1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d102      	bne.n	8005f26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2203      	movs	r2, #3
 8005f24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b0b      	cmp	r3, #11
 8005f2e:	f200 81be 	bhi.w	80062ae <USBH_Process+0x3aa>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <USBH_Process+0x34>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f9b 	.word	0x08005f9b
 8005f40:	08006003 	.word	0x08006003
 8005f44:	08006249 	.word	0x08006249
 8005f48:	080062af 	.word	0x080062af
 8005f4c:	080060a7 	.word	0x080060a7
 8005f50:	080061ef 	.word	0x080061ef
 8005f54:	080060dd 	.word	0x080060dd
 8005f58:	080060fd 	.word	0x080060fd
 8005f5c:	0800611d 	.word	0x0800611d
 8005f60:	08006161 	.word	0x08006161
 8005f64:	08006231 	.word	0x08006231
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 819e 	beq.w	80062b2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f7c:	20c8      	movs	r0, #200	; 0xc8
 8005f7e:	f001 fd95 	bl	8007aac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fc8b 	bl	800789e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f98:	e18b      	b.n	80062b2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d107      	bne.n	8005fb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fb2:	e18d      	b.n	80062d0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fbe:	d914      	bls.n	8005fea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d903      	bls.n	8005fe2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	220d      	movs	r2, #13
 8005fde:	701a      	strb	r2, [r3, #0]
      break;
 8005fe0:	e176      	b.n	80062d0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
      break;
 8005fe8:	e172      	b.n	80062d0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ff0:	f103 020a 	add.w	r2, r3, #10
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ffa:	200a      	movs	r0, #10
 8005ffc:	f001 fd56 	bl	8007aac <USBH_Delay>
      break;
 8006000:	e166      	b.n	80062d0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006012:	2104      	movs	r1, #4
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	f001 fd47 	bl	8007aac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fc16 	bl	8007850 <USBH_LL_GetSpeed>
 8006024:	4603      	mov	r3, r0
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2205      	movs	r2, #5
 8006032:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006034:	2100      	movs	r1, #0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fa29 	bl	800748e <USBH_AllocPipe>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006044:	2180      	movs	r1, #128	; 0x80
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fa21 	bl	800748e <USBH_AllocPipe>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	7919      	ldrb	r1, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006068:	b292      	uxth	r2, r2
 800606a:	9202      	str	r2, [sp, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	9201      	str	r2, [sp, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4603      	mov	r3, r0
 8006074:	2280      	movs	r2, #128	; 0x80
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 f9da 	bl	8007430 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7959      	ldrb	r1, [r3, #5]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006090:	b292      	uxth	r2, r2
 8006092:	9202      	str	r2, [sp, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	9201      	str	r2, [sp, #4]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4603      	mov	r3, r0
 800609c:	2200      	movs	r2, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 f9c6 	bl	8007430 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060a4:	e114      	b.n	80062d0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f918 	bl	80062dc <USBH_HandleEnum>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 80fe 	bne.w	80062b6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d103      	bne.n	80060d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2208      	movs	r2, #8
 80060d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80060d2:	e0f0      	b.n	80062b6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2207      	movs	r2, #7
 80060d8:	701a      	strb	r2, [r3, #0]
      break;
 80060da:	e0ec      	b.n	80062b6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80e9 	beq.w	80062ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ee:	2101      	movs	r1, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2208      	movs	r2, #8
 80060f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80060fa:	e0de      	b.n	80062ba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006102:	b29b      	uxth	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc2c 	bl	8006964 <USBH_SetCfg>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 80d5 	bne.w	80062be <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2209      	movs	r2, #9
 8006118:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800611a:	e0d0      	b.n	80062be <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800612a:	2101      	movs	r1, #1
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fc3c 	bl	80069aa <USBH_SetFeature>
 8006132:	4603      	mov	r3, r0
 8006134:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006136:	7bbb      	ldrb	r3, [r7, #14]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	220a      	movs	r2, #10
 8006142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006144:	e0bd      	b.n	80062c2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	f040 80b9 	bne.w	80062c2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	220a      	movs	r2, #10
 8006154:	701a      	strb	r2, [r3, #0]
      break;
 8006156:	e0b4      	b.n	80062c2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	220a      	movs	r2, #10
 800615c:	701a      	strb	r2, [r3, #0]
      break;
 800615e:	e0b0      	b.n	80062c2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 80ad 	beq.w	80062c6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e016      	b.n	80061a8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	32de      	adds	r2, #222	; 0xde
 8006180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006184:	791a      	ldrb	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800618c:	429a      	cmp	r2, r3
 800618e:	d108      	bne.n	80061a2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006190:	7bfa      	ldrb	r2, [r7, #15]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32de      	adds	r2, #222	; 0xde
 8006196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061a0:	e005      	b.n	80061ae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	3301      	adds	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0e5      	beq.n	800617a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2206      	movs	r2, #6
 80061ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061d6:	2103      	movs	r1, #3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061dc:	e073      	b.n	80062c6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	220d      	movs	r2, #13
 80061e2:	701a      	strb	r2, [r3, #0]
      break;
 80061e4:	e06f      	b.n	80062c6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	220d      	movs	r2, #13
 80061ea:	701a      	strb	r2, [r3, #0]
      break;
 80061ec:	e06b      	b.n	80062c6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
 8006204:	4603      	mov	r3, r0
 8006206:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006208:	7bbb      	ldrb	r3, [r7, #14]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	220b      	movs	r2, #11
 8006214:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006216:	e058      	b.n	80062ca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d154      	bne.n	80062ca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	220d      	movs	r2, #13
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	e050      	b.n	80062ca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	220d      	movs	r2, #13
 800622c:	701a      	strb	r2, [r3, #0]
      break;
 800622e:	e04c      	b.n	80062ca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d049      	beq.n	80062ce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      }
      break;
 8006246:	e042      	b.n	80062ce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fd67 	bl	8005d24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006284:	2105      	movs	r1, #5
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fe20 	bl	8005ee4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062a4:	e014      	b.n	80062d0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fa9c 	bl	80077e4 <USBH_LL_Start>
      break;
 80062ac:	e010      	b.n	80062d0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80062ae:	bf00      	nop
 80062b0:	e00e      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062b2:	bf00      	nop
 80062b4:	e00c      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062b6:	bf00      	nop
 80062b8:	e00a      	b.n	80062d0 <USBH_Process+0x3cc>
    break;
 80062ba:	bf00      	nop
 80062bc:	e008      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062be:	bf00      	nop
 80062c0:	e006      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062c2:	bf00      	nop
 80062c4:	e004      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062c6:	bf00      	nop
 80062c8:	e002      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <USBH_Process+0x3cc>
      break;
 80062ce:	bf00      	nop
  }
  return USBH_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	f200 81c1 	bhi.w	8006678 <USBH_HandleEnum+0x39c>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <USBH_HandleEnum+0x20>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	080063db 	.word	0x080063db
 8006304:	08006445 	.word	0x08006445
 8006308:	080064d3 	.word	0x080064d3
 800630c:	0800653d 	.word	0x0800653d
 8006310:	080065ad 	.word	0x080065ad
 8006314:	080065f3 	.word	0x080065f3
 8006318:	08006639 	.word	0x08006639
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800631c:	2108      	movs	r1, #8
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa50 	bl	80067c4 <USBH_Get_DevDesc>
 8006324:	4603      	mov	r3, r0
 8006326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d130      	bne.n	8006390 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7919      	ldrb	r1, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006352:	b292      	uxth	r2, r2
 8006354:	9202      	str	r2, [sp, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4603      	mov	r3, r0
 800635e:	2280      	movs	r2, #128	; 0x80
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f865 	bl	8007430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7959      	ldrb	r1, [r3, #5]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800637a:	b292      	uxth	r2, r2
 800637c:	9202      	str	r2, [sp, #8]
 800637e:	2200      	movs	r2, #0
 8006380:	9201      	str	r2, [sp, #4]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4603      	mov	r3, r0
 8006386:	2200      	movs	r2, #0
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 f851 	bl	8007430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800638e:	e175      	b.n	800667c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b03      	cmp	r3, #3
 8006394:	f040 8172 	bne.w	800667c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800639e:	3301      	adds	r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d903      	bls.n	80063ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220d      	movs	r2, #13
 80063b6:	701a      	strb	r2, [r3, #0]
      break;
 80063b8:	e160      	b.n	800667c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	795b      	ldrb	r3, [r3, #5]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f885 	bl	80074d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f87f 	bl	80074d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
      break;
 80063d8:	e150      	b.n	800667c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80063da:	2112      	movs	r1, #18
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f9f1 	bl	80067c4 <USBH_Get_DevDesc>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063f2:	e145      	b.n	8006680 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	f040 8142 	bne.w	8006680 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006412:	2b03      	cmp	r3, #3
 8006414:	d903      	bls.n	800641e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	220d      	movs	r2, #13
 800641a:	701a      	strb	r2, [r3, #0]
      break;
 800641c:	e130      	b.n	8006680 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	795b      	ldrb	r3, [r3, #5]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 f853 	bl	80074d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	791b      	ldrb	r3, [r3, #4]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f84d 	bl	80074d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
      break;
 8006442:	e11d      	b.n	8006680 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa68 	bl	800691c <USBH_SetAddress>
 800644c:	4603      	mov	r3, r0
 800644e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d132      	bne.n	80064bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006456:	2002      	movs	r0, #2
 8006458:	f001 fb28 	bl	8007aac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	7919      	ldrb	r1, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800647e:	b292      	uxth	r2, r2
 8006480:	9202      	str	r2, [sp, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	9201      	str	r2, [sp, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4603      	mov	r3, r0
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 ffcf 	bl	8007430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7959      	ldrb	r1, [r3, #5]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064a6:	b292      	uxth	r2, r2
 80064a8:	9202      	str	r2, [sp, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	2200      	movs	r2, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 ffbb 	bl	8007430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064ba:	e0e3      	b.n	8006684 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f040 80e0 	bne.w	8006684 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	220d      	movs	r2, #13
 80064c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	705a      	strb	r2, [r3, #1]
      break;
 80064d0:	e0d8      	b.n	8006684 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80064d2:	2109      	movs	r1, #9
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f99d 	bl	8006814 <USBH_Get_CfgDesc>
 80064da:	4603      	mov	r3, r0
 80064dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2204      	movs	r2, #4
 80064e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ea:	e0cd      	b.n	8006688 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	f040 80ca 	bne.w	8006688 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fa:	3301      	adds	r3, #1
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800650a:	2b03      	cmp	r3, #3
 800650c:	d903      	bls.n	8006516 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	220d      	movs	r2, #13
 8006512:	701a      	strb	r2, [r3, #0]
      break;
 8006514:	e0b8      	b.n	8006688 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	795b      	ldrb	r3, [r3, #5]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 ffd7 	bl	80074d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 ffd1 	bl	80074d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
      break;
 800653a:	e0a5      	b.n	8006688 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f965 	bl	8006814 <USBH_Get_CfgDesc>
 800654a:	4603      	mov	r3, r0
 800654c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2205      	movs	r2, #5
 8006558:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800655a:	e097      	b.n	800668c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b03      	cmp	r3, #3
 8006560:	f040 8094 	bne.w	800668c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800656a:	3301      	adds	r3, #1
 800656c:	b2da      	uxtb	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657a:	2b03      	cmp	r3, #3
 800657c:	d903      	bls.n	8006586 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	220d      	movs	r2, #13
 8006582:	701a      	strb	r2, [r3, #0]
      break;
 8006584:	e082      	b.n	800668c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	795b      	ldrb	r3, [r3, #5]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 ff9f 	bl	80074d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ff99 	bl	80074d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
      break;
 80065aa:	e06f      	b.n	800668c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d019      	beq.n	80065ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065c2:	23ff      	movs	r3, #255	; 0xff
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f949 	bl	800685c <USBH_Get_StringDesc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2206      	movs	r2, #6
 80065d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065da:	e059      	b.n	8006690 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d156      	bne.n	8006690 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2206      	movs	r2, #6
 80065e6:	705a      	strb	r2, [r3, #1]
      break;
 80065e8:	e052      	b.n	8006690 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2206      	movs	r2, #6
 80065ee:	705a      	strb	r2, [r3, #1]
      break;
 80065f0:	e04e      	b.n	8006690 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d019      	beq.n	8006630 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006608:	23ff      	movs	r3, #255	; 0xff
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f926 	bl	800685c <USBH_Get_StringDesc>
 8006610:	4603      	mov	r3, r0
 8006612:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2207      	movs	r2, #7
 800661e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006620:	e038      	b.n	8006694 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d135      	bne.n	8006694 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2207      	movs	r2, #7
 800662c:	705a      	strb	r2, [r3, #1]
      break;
 800662e:	e031      	b.n	8006694 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2207      	movs	r2, #7
 8006634:	705a      	strb	r2, [r3, #1]
      break;
 8006636:	e02d      	b.n	8006694 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800663e:	2b00      	cmp	r3, #0
 8006640:	d017      	beq.n	8006672 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800664e:	23ff      	movs	r3, #255	; 0xff
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f903 	bl	800685c <USBH_Get_StringDesc>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006664:	e018      	b.n	8006698 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d115      	bne.n	8006698 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e012      	b.n	8006698 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
      break;
 8006676:	e00f      	b.n	8006698 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006678:	bf00      	nop
 800667a:	e00e      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 800667c:	bf00      	nop
 800667e:	e00c      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006680:	bf00      	nop
 8006682:	e00a      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006684:	bf00      	nop
 8006686:	e008      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006688:	bf00      	nop
 800668a:	e006      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 800668c:	bf00      	nop
 800668e:	e004      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006698:	bf00      	nop
  }
  return Status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f804 	bl	80066e6 <USBH_HandleSof>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b0b      	cmp	r3, #11
 80066f6:	d10a      	bne.n	800670e <USBH_HandleSof+0x28>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
  }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006726:	bf00      	nop
}
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006742:	bf00      	nop
}
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f83c 	bl	800781a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fe91 	bl	80074d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	795b      	ldrb	r3, [r3, #5]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fe8b 	bl	80074d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f864 	bl	80068b2 <USBH_GetDescriptor>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	b292      	uxth	r2, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f000 f918 	bl	8006a3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	331c      	adds	r3, #28
 8006824:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f83d 	bl	80068b2 <USBH_GetDescriptor>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006842:	887b      	ldrh	r3, [r7, #2]
 8006844:	461a      	mov	r2, r3
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f987 	bl	8006b5c <USBH_ParseCfgDesc>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	460b      	mov	r3, r1
 800686a:	72fb      	strb	r3, [r7, #11]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006878:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006880:	893b      	ldrh	r3, [r7, #8]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	2100      	movs	r1, #0
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f812 	bl	80068b2 <USBH_GetDescriptor>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800689e:	893a      	ldrh	r2, [r7, #8]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb24 	bl	8006ef0 <USBH_ParseStringDesc>
  }

  return status;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
 80068c0:	4613      	mov	r3, r2
 80068c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d11c      	bne.n	8006906 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2206      	movs	r2, #6
 80068dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	893a      	ldrh	r2, [r7, #8]
 80068e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068e4:	893b      	ldrh	r3, [r7, #8]
 80068e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ee:	d104      	bne.n	80068fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f240 4209 	movw	r2, #1033	; 0x409
 80068f6:	829a      	strh	r2, [r3, #20]
 80068f8:	e002      	b.n	8006900 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8b3a      	ldrh	r2, [r7, #24]
 8006904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006906:	8b3b      	ldrh	r3, [r7, #24]
 8006908:	461a      	mov	r2, r3
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fb3d 	bl	8006f8c <USBH_CtlReq>
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	789b      	ldrb	r3, [r3, #2]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2205      	movs	r2, #5
 800693a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb19 	bl	8006f8c <USBH_CtlReq>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10e      	bne.n	8006996 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2209      	movs	r2, #9
 8006982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	887a      	ldrh	r2, [r7, #2]
 8006988:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 faf6 	bl	8006f8c <USBH_CtlReq>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	789b      	ldrb	r3, [r3, #2]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10f      	bne.n	80069de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fad2 	bl	8006f8c <USBH_CtlReq>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10f      	bne.n	8006a26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 faae 	bl	8006f8c <USBH_CtlReq>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	4613      	mov	r3, r2
 8006a46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785a      	ldrb	r2, [r3, #1]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3303      	adds	r3, #3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	791a      	ldrb	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	795a      	ldrb	r2, [r3, #5]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	799a      	ldrb	r2, [r3, #6]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	79da      	ldrb	r2, [r3, #7]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	79db      	ldrb	r3, [r3, #7]
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	dc11      	bgt.n	8006ac0 <USBH_ParseDevDesc+0x86>
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	db16      	blt.n	8006ace <USBH_ParseDevDesc+0x94>
 8006aa0:	3b08      	subs	r3, #8
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <USBH_ParseDevDesc+0x8a>
 8006abe:	e006      	b.n	8006ace <USBH_ParseDevDesc+0x94>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d104      	bne.n	8006ace <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	79da      	ldrb	r2, [r3, #7]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	71da      	strb	r2, [r3, #7]
      break;
 8006acc:	e003      	b.n	8006ad6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2240      	movs	r2, #64	; 0x40
 8006ad2:	71da      	strb	r2, [r3, #7]
      break;
 8006ad4:	bf00      	nop
  }

  if (length > 8U)
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d939      	bls.n	8006b50 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	3309      	adds	r3, #9
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	330a      	adds	r3, #10
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	330b      	adds	r3, #11
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	330c      	adds	r3, #12
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	330d      	adds	r3, #13
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	7b9a      	ldrb	r2, [r3, #14]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	7bda      	ldrb	r2, [r3, #15]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	7c1a      	ldrb	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	7c5a      	ldrb	r2, [r3, #17]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	745a      	strb	r2, [r3, #17]
  }
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	785a      	ldrb	r2, [r3, #1]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	3303      	adds	r3, #3
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb8:	bf28      	it	cs
 8006bba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	791a      	ldrb	r2, [r3, #4]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	795a      	ldrb	r2, [r3, #5]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	799a      	ldrb	r2, [r3, #6]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	79da      	ldrb	r2, [r3, #7]
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	7a1a      	ldrb	r2, [r3, #8]
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b09      	cmp	r3, #9
 8006bf2:	d002      	beq.n	8006bfa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2209      	movs	r2, #9
 8006bf8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	f240 809d 	bls.w	8006d3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c02:	2309      	movs	r3, #9
 8006c04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c0a:	e081      	b.n	8006d10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c0c:	f107 0316 	add.w	r3, r7, #22
 8006c10:	4619      	mov	r1, r3
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f000 f99f 	bl	8006f56 <USBH_GetNextDesc>
 8006c18:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d176      	bne.n	8006d10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b09      	cmp	r3, #9
 8006c28:	d002      	beq.n	8006c30 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	2209      	movs	r2, #9
 8006c2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c34:	221a      	movs	r2, #26
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	4413      	add	r3, r2
 8006c40:	3302      	adds	r3, #2
 8006c42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c46:	69f8      	ldr	r0, [r7, #28]
 8006c48:	f000 f87e 	bl	8006d48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c56:	e043      	b.n	8006ce0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c58:	f107 0316 	add.w	r3, r7, #22
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c60:	f000 f979 	bl	8006f56 <USBH_GetNextDesc>
 8006c64:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d138      	bne.n	8006ce0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	795b      	ldrb	r3, [r3, #5]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10f      	bne.n	8006c96 <USBH_ParseCfgDesc+0x13a>
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	799b      	ldrb	r3, [r3, #6]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d10b      	bne.n	8006c96 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	79db      	ldrb	r3, [r3, #7]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <USBH_ParseCfgDesc+0x14a>
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d00b      	beq.n	8006ca6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	2209      	movs	r2, #9
 8006c92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c94:	e007      	b.n	8006ca6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b07      	cmp	r3, #7
 8006c9c:	d004      	beq.n	8006ca8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e000      	b.n	8006ca8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006ca6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	211a      	movs	r1, #26
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f86b 	bl	8006da6 <USBH_ParseEPDesc>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cda:	3301      	adds	r3, #1
 8006cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	791b      	ldrb	r3, [r3, #4]
 8006ce4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d204      	bcs.n	8006cf6 <USBH_ParseCfgDesc+0x19a>
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	885a      	ldrh	r2, [r3, #2]
 8006cf0:	8afb      	ldrh	r3, [r7, #22]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d8b0      	bhi.n	8006c58 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d201      	bcs.n	8006d06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e01c      	b.n	8006d40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d805      	bhi.n	8006d24 <USBH_ParseCfgDesc+0x1c8>
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	885a      	ldrh	r2, [r3, #2]
 8006d1c:	8afb      	ldrh	r3, [r7, #22]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	f63f af74 	bhi.w	8006c0c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	791b      	ldrb	r3, [r3, #4]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	bf28      	it	cs
 8006d2c:	2302      	movcs	r3, #2
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d201      	bcs.n	8006d3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e001      	b.n	8006d40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	785a      	ldrb	r2, [r3, #1]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	789a      	ldrb	r2, [r3, #2]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	78da      	ldrb	r2, [r3, #3]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	791a      	ldrb	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	795a      	ldrb	r2, [r3, #5]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	799a      	ldrb	r2, [r3, #6]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	79da      	ldrb	r2, [r3, #7]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	7a1a      	ldrb	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	721a      	strb	r2, [r3, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	785a      	ldrb	r2, [r3, #1]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	789a      	ldrb	r2, [r3, #2]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	78da      	ldrb	r2, [r3, #3]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3305      	adds	r3, #5
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	799a      	ldrb	r2, [r3, #6]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	889b      	ldrh	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006e02:	2303      	movs	r3, #3
 8006e04:	75fb      	strb	r3, [r7, #23]
 8006e06:	e033      	b.n	8006e70 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	889b      	ldrh	r3, [r3, #4]
 8006e0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	889b      	ldrh	r3, [r3, #4]
 8006e1e:	b21a      	sxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b299      	uxth	r1, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3305      	adds	r3, #5
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	430b      	orrs	r3, r1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <USBH_ParseEPDesc+0xbc>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b299      	uxth	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3305      	adds	r3, #5
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	430b      	orrs	r3, r1
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	b21b      	sxth	r3, r3
 8006e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e5e:	b21b      	sxth	r3, r3
 8006e60:	e001      	b.n	8006e66 <USBH_ParseEPDesc+0xc0>
 8006e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b21b      	sxth	r3, r3
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d116      	bne.n	8006ea8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	78db      	ldrb	r3, [r3, #3]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d005      	beq.n	8006e92 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	78db      	ldrb	r3, [r3, #3]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d127      	bne.n	8006ee2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	799b      	ldrb	r3, [r3, #6]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <USBH_ParseEPDesc+0xfc>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	799b      	ldrb	r3, [r3, #6]
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d91f      	bls.n	8006ee2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
 8006ea6:	e01c      	b.n	8006ee2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	78db      	ldrb	r3, [r3, #3]
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d10a      	bne.n	8006eca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	799b      	ldrb	r3, [r3, #6]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <USBH_ParseEPDesc+0x11e>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	799b      	ldrb	r3, [r3, #6]
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d90e      	bls.n	8006ee2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	75fb      	strb	r3, [r7, #23]
 8006ec8:	e00b      	b.n	8006ee2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	78db      	ldrb	r3, [r3, #3]
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d105      	bne.n	8006ee2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	799b      	ldrb	r3, [r3, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d120      	bne.n	8006f4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	1e9a      	subs	r2, r3, #2
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bf28      	it	cs
 8006f14:	4613      	movcs	r3, r2
 8006f16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	82fb      	strh	r3, [r7, #22]
 8006f22:	e00b      	b.n	8006f3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	3302      	adds	r3, #2
 8006f3a:	82fb      	strh	r3, [r7, #22]
 8006f3c:	8afa      	ldrh	r2, [r7, #22]
 8006f3e:	8abb      	ldrh	r3, [r7, #20]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d3ef      	bcc.n	8006f24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	789b      	ldrb	r3, [r3, #2]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d002      	beq.n	8006fac <USBH_CtlReq+0x20>
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d00f      	beq.n	8006fca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006faa:	e027      	b.n	8006ffc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc8:	e018      	b.n	8006ffc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f81c 	bl	8007008 <USBH_HandleControl>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <USBH_CtlReq+0x54>
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d106      	bne.n	8006fee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	761a      	strb	r2, [r3, #24]
      break;
 8006fec:	e005      	b.n	8006ffa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d102      	bne.n	8006ffa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	709a      	strb	r2, [r3, #2]
      break;
 8006ffa:	bf00      	nop
  }
  return status;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007014:	2300      	movs	r3, #0
 8007016:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7e1b      	ldrb	r3, [r3, #24]
 800701c:	3b01      	subs	r3, #1
 800701e:	2b0a      	cmp	r3, #10
 8007020:	f200 8156 	bhi.w	80072d0 <USBH_HandleControl+0x2c8>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <USBH_HandleControl+0x24>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007059 	.word	0x08007059
 8007030:	08007073 	.word	0x08007073
 8007034:	080070dd 	.word	0x080070dd
 8007038:	08007103 	.word	0x08007103
 800703c:	0800713b 	.word	0x0800713b
 8007040:	08007165 	.word	0x08007165
 8007044:	080071b7 	.word	0x080071b7
 8007048:	080071d9 	.word	0x080071d9
 800704c:	08007215 	.word	0x08007215
 8007050:	0800723b 	.word	0x0800723b
 8007054:	08007279 	.word	0x08007279
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f103 0110 	add.w	r1, r3, #16
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	795b      	ldrb	r3, [r3, #5]
 8007062:	461a      	mov	r2, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f943 	bl	80072f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	761a      	strb	r2, [r3, #24]
      break;
 8007070:	e139      	b.n	80072e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	795b      	ldrb	r3, [r3, #5]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fcbd 	bl	80079f8 <USBH_LL_GetURBState>
 800707e:	4603      	mov	r3, r0
 8007080:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d11e      	bne.n	80070c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7c1b      	ldrb	r3, [r3, #16]
 800708c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007090:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8adb      	ldrh	r3, [r3, #22]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800709a:	7b7b      	ldrb	r3, [r7, #13]
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d103      	bne.n	80070a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2203      	movs	r2, #3
 80070a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070a6:	e115      	b.n	80072d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2205      	movs	r2, #5
 80070ac:	761a      	strb	r2, [r3, #24]
      break;
 80070ae:	e111      	b.n	80072d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80070b0:	7b7b      	ldrb	r3, [r7, #13]
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d103      	bne.n	80070be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2209      	movs	r2, #9
 80070ba:	761a      	strb	r2, [r3, #24]
      break;
 80070bc:	e10a      	b.n	80072d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2207      	movs	r2, #7
 80070c2:	761a      	strb	r2, [r3, #24]
      break;
 80070c4:	e106      	b.n	80072d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d003      	beq.n	80070d4 <USBH_HandleControl+0xcc>
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	f040 8100 	bne.w	80072d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	220b      	movs	r2, #11
 80070d8:	761a      	strb	r2, [r3, #24]
      break;
 80070da:	e0fb      	b.n	80072d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6899      	ldr	r1, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	899a      	ldrh	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	791b      	ldrb	r3, [r3, #4]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f93a 	bl	800736e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	761a      	strb	r2, [r3, #24]
      break;
 8007100:	e0f1      	b.n	80072e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc75 	bl	80079f8 <USBH_LL_GetURBState>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d102      	bne.n	800711e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2209      	movs	r2, #9
 800711c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d102      	bne.n	800712a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007124:	2303      	movs	r3, #3
 8007126:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007128:	e0d6      	b.n	80072d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b04      	cmp	r3, #4
 800712e:	f040 80d3 	bne.w	80072d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	220b      	movs	r2, #11
 8007136:	761a      	strb	r2, [r3, #24]
      break;
 8007138:	e0ce      	b.n	80072d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6899      	ldr	r1, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	899a      	ldrh	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	2001      	movs	r0, #1
 8007148:	9000      	str	r0, [sp, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f8ea 	bl	8007324 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2206      	movs	r2, #6
 8007160:	761a      	strb	r2, [r3, #24]
      break;
 8007162:	e0c0      	b.n	80072e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	795b      	ldrb	r3, [r3, #5]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc44 	bl	80079f8 <USBH_LL_GetURBState>
 8007170:	4603      	mov	r3, r0
 8007172:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d103      	bne.n	8007182 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2207      	movs	r2, #7
 800717e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007180:	e0ac      	b.n	80072dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b05      	cmp	r3, #5
 8007186:	d105      	bne.n	8007194 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	220c      	movs	r2, #12
 800718c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800718e:	2303      	movs	r3, #3
 8007190:	73fb      	strb	r3, [r7, #15]
      break;
 8007192:	e0a3      	b.n	80072dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d103      	bne.n	80071a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2205      	movs	r2, #5
 800719e:	761a      	strb	r2, [r3, #24]
      break;
 80071a0:	e09c      	b.n	80072dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	f040 8099 	bne.w	80072dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220b      	movs	r2, #11
 80071ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80071b0:	2302      	movs	r3, #2
 80071b2:	73fb      	strb	r3, [r7, #15]
      break;
 80071b4:	e092      	b.n	80072dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8d5 	bl	800736e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2208      	movs	r2, #8
 80071d4:	761a      	strb	r2, [r3, #24]

      break;
 80071d6:	e086      	b.n	80072e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	791b      	ldrb	r3, [r3, #4]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc0a 	bl	80079f8 <USBH_LL_GetURBState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d105      	bne.n	80071fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	220d      	movs	r2, #13
 80071f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071f8:	e072      	b.n	80072e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d103      	bne.n	8007208 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220b      	movs	r2, #11
 8007204:	761a      	strb	r2, [r3, #24]
      break;
 8007206:	e06b      	b.n	80072e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b05      	cmp	r3, #5
 800720c:	d168      	bne.n	80072e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800720e:	2303      	movs	r3, #3
 8007210:	73fb      	strb	r3, [r7, #15]
      break;
 8007212:	e065      	b.n	80072e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	795b      	ldrb	r3, [r3, #5]
 8007218:	2201      	movs	r2, #1
 800721a:	9200      	str	r2, [sp, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f87f 	bl	8007324 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220a      	movs	r2, #10
 8007236:	761a      	strb	r2, [r3, #24]
      break;
 8007238:	e055      	b.n	80072e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	795b      	ldrb	r3, [r3, #5]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbd9 	bl	80079f8 <USBH_LL_GetURBState>
 8007246:	4603      	mov	r3, r0
 8007248:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220d      	movs	r2, #13
 8007258:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800725a:	e043      	b.n	80072e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d103      	bne.n	800726a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2209      	movs	r2, #9
 8007266:	761a      	strb	r2, [r3, #24]
      break;
 8007268:	e03c      	b.n	80072e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d139      	bne.n	80072e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220b      	movs	r2, #11
 8007274:	761a      	strb	r2, [r3, #24]
      break;
 8007276:	e035      	b.n	80072e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7e5b      	ldrb	r3, [r3, #25]
 800727c:	3301      	adds	r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	765a      	strb	r2, [r3, #25]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7e5b      	ldrb	r3, [r3, #25]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d806      	bhi.n	800729a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007298:	e025      	b.n	80072e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a0:	2106      	movs	r1, #6
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	795b      	ldrb	r3, [r3, #5]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f90c 	bl	80074d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	791b      	ldrb	r3, [r3, #4]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f906 	bl	80074d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80072ca:	2302      	movs	r3, #2
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	e00a      	b.n	80072e6 <USBH_HandleControl+0x2de>

    default:
      break;
 80072d0:	bf00      	nop
 80072d2:	e008      	b.n	80072e6 <USBH_HandleControl+0x2de>
      break;
 80072d4:	bf00      	nop
 80072d6:	e006      	b.n	80072e6 <USBH_HandleControl+0x2de>
      break;
 80072d8:	bf00      	nop
 80072da:	e004      	b.n	80072e6 <USBH_HandleControl+0x2de>
      break;
 80072dc:	bf00      	nop
 80072de:	e002      	b.n	80072e6 <USBH_HandleControl+0x2de>
      break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <USBH_HandleControl+0x2de>
      break;
 80072e4:	bf00      	nop
  }

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072fe:	79f9      	ldrb	r1, [r7, #7]
 8007300:	2300      	movs	r3, #0
 8007302:	9303      	str	r3, [sp, #12]
 8007304:	2308      	movs	r3, #8
 8007306:	9302      	str	r3, [sp, #8]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	2300      	movs	r3, #0
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	2200      	movs	r2, #0
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fb3e 	bl	8007996 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af04      	add	r7, sp, #16
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	460b      	mov	r3, r1
 8007334:	80fb      	strh	r3, [r7, #6]
 8007336:	4613      	mov	r3, r2
 8007338:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007348:	7979      	ldrb	r1, [r7, #5]
 800734a:	7e3b      	ldrb	r3, [r7, #24]
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	2301      	movs	r3, #1
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fb19 	bl	8007996 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af04      	add	r7, sp, #16
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4611      	mov	r1, r2
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	80fb      	strh	r3, [r7, #6]
 8007380:	4613      	mov	r3, r2
 8007382:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007384:	7979      	ldrb	r1, [r7, #5]
 8007386:	2300      	movs	r3, #0
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	2301      	movs	r3, #1
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	2201      	movs	r2, #1
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fafb 	bl	8007996 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073a0:	2300      	movs	r3, #0

}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af04      	add	r7, sp, #16
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	4611      	mov	r1, r2
 80073b6:	461a      	mov	r2, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	80fb      	strh	r3, [r7, #6]
 80073bc:	4613      	mov	r3, r2
 80073be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073ce:	7979      	ldrb	r1, [r7, #5]
 80073d0:	7e3b      	ldrb	r3, [r7, #24]
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	2301      	movs	r3, #1
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fad6 	bl	8007996 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af04      	add	r7, sp, #16
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4611      	mov	r1, r2
 8007400:	461a      	mov	r2, r3
 8007402:	460b      	mov	r3, r1
 8007404:	80fb      	strh	r3, [r7, #6]
 8007406:	4613      	mov	r3, r2
 8007408:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800740a:	7979      	ldrb	r1, [r7, #5]
 800740c:	2300      	movs	r3, #0
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	9302      	str	r3, [sp, #8]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	2301      	movs	r3, #1
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2302      	movs	r3, #2
 800741e:	2201      	movs	r2, #1
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fab8 	bl	8007996 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af04      	add	r7, sp, #16
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4603      	mov	r3, r0
 8007440:	70fb      	strb	r3, [r7, #3]
 8007442:	460b      	mov	r3, r1
 8007444:	70bb      	strb	r3, [r7, #2]
 8007446:	4613      	mov	r3, r2
 8007448:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800744a:	7878      	ldrb	r0, [r7, #1]
 800744c:	78ba      	ldrb	r2, [r7, #2]
 800744e:	78f9      	ldrb	r1, [r7, #3]
 8007450:	8b3b      	ldrh	r3, [r7, #24]
 8007452:	9302      	str	r3, [sp, #8]
 8007454:	7d3b      	ldrb	r3, [r7, #20]
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	7c3b      	ldrb	r3, [r7, #16]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4603      	mov	r3, r0
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa4b 	bl	80078fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa6a 	bl	8007958 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f836 	bl	800750c <USBH_GetFreePipe>
 80074a0:	4603      	mov	r3, r0
 80074a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00a      	beq.n	80074c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	89fb      	ldrh	r3, [r7, #14]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	33e0      	adds	r3, #224	; 0xe0
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80074c4:	89fb      	ldrh	r3, [r7, #14]
 80074c6:	b2db      	uxtb	r3, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d80d      	bhi.n	80074fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	33e0      	adds	r3, #224	; 0xe0
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80074f4:	6879      	ldr	r1, [r7, #4]
 80074f6:	33e0      	adds	r3, #224	; 0xe0
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	e00f      	b.n	800753e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	33e0      	adds	r3, #224	; 0xe0
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	b29b      	uxth	r3, r3
 8007536:	e007      	b.n	8007548 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	3301      	adds	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	2b0f      	cmp	r3, #15
 8007542:	d9ec      	bls.n	800751e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007544:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007558:	2201      	movs	r2, #1
 800755a:	490e      	ldr	r1, [pc, #56]	; (8007594 <MX_USB_HOST_Init+0x40>)
 800755c:	480e      	ldr	r0, [pc, #56]	; (8007598 <MX_USB_HOST_Init+0x44>)
 800755e:	f7fe fba7 	bl	8005cb0 <USBH_Init>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007568:	f7f9 fa12 	bl	8000990 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800756c:	490b      	ldr	r1, [pc, #44]	; (800759c <MX_USB_HOST_Init+0x48>)
 800756e:	480a      	ldr	r0, [pc, #40]	; (8007598 <MX_USB_HOST_Init+0x44>)
 8007570:	f7fe fc2c 	bl	8005dcc <USBH_RegisterClass>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800757a:	f7f9 fa09 	bl	8000990 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800757e:	4806      	ldr	r0, [pc, #24]	; (8007598 <MX_USB_HOST_Init+0x44>)
 8007580:	f7fe fcb0 	bl	8005ee4 <USBH_Start>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800758a:	f7f9 fa01 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	080075b5 	.word	0x080075b5
 8007598:	200001f0 	.word	0x200001f0
 800759c:	2000000c 	.word	0x2000000c

080075a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80075a4:	4802      	ldr	r0, [pc, #8]	; (80075b0 <MX_USB_HOST_Process+0x10>)
 80075a6:	f7fe fcad 	bl	8005f04 <USBH_Process>
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200001f0 	.word	0x200001f0

080075b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d819      	bhi.n	80075fc <USBH_UserProcess+0x48>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBH_UserProcess+0x1c>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075e5 	.word	0x080075e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <USBH_UserProcess+0x58>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
  break;
 80075ea:	e008      	b.n	80075fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075ec:	4b07      	ldr	r3, [pc, #28]	; (800760c <USBH_UserProcess+0x58>)
 80075ee:	2202      	movs	r2, #2
 80075f0:	701a      	strb	r2, [r3, #0]
  break;
 80075f2:	e004      	b.n	80075fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <USBH_UserProcess+0x58>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
  break;
 80075fa:	e000      	b.n	80075fe <USBH_UserProcess+0x4a>

  default:
  break;
 80075fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	200005c8 	.word	0x200005c8

08007610 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08a      	sub	sp, #40	; 0x28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007630:	d13f      	bne.n	80076b2 <HAL_HCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	4b21      	ldr	r3, [pc, #132]	; (80076bc <HAL_HCD_MspInit+0xac>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	4a20      	ldr	r2, [pc, #128]	; (80076bc <HAL_HCD_MspInit+0xac>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6313      	str	r3, [r2, #48]	; 0x30
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <HAL_HCD_MspInit+0xac>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800764e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007654:	2300      	movs	r3, #0
 8007656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4619      	mov	r1, r3
 8007662:	4817      	ldr	r0, [pc, #92]	; (80076c0 <HAL_HCD_MspInit+0xb0>)
 8007664:	f7f9 fd7c 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007668:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800766c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766e:	2302      	movs	r3, #2
 8007670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007676:	2303      	movs	r3, #3
 8007678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800767a:	230a      	movs	r3, #10
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800767e:	f107 0314 	add.w	r3, r7, #20
 8007682:	4619      	mov	r1, r3
 8007684:	480e      	ldr	r0, [pc, #56]	; (80076c0 <HAL_HCD_MspInit+0xb0>)
 8007686:	f7f9 fd6b 	bl	8001160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <HAL_HCD_MspInit+0xac>)
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <HAL_HCD_MspInit+0xac>)
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	6353      	str	r3, [r2, #52]	; 0x34
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <HAL_HCD_MspInit+0xac>)
 800769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769e:	4a07      	ldr	r2, [pc, #28]	; (80076bc <HAL_HCD_MspInit+0xac>)
 80076a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076a4:	6453      	str	r3, [r2, #68]	; 0x44
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_HCD_MspInit+0xac>)
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076b2:	bf00      	nop
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40020000 	.word	0x40020000

080076c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fff5 	bl	80066c2 <USBH_LL_IncTimer>
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff f82d 	bl	800674e <USBH_LL_Connect>
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff f836 	bl	800677c <USBH_LL_Disconnect>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
 8007724:	4613      	mov	r3, r2
 8007726:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe ffe7 	bl	8006716 <USBH_LL_PortEnabled>
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe ffe7 	bl	8006732 <USBH_LL_PortDisabled>
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800777a:	2b01      	cmp	r3, #1
 800777c:	d12a      	bne.n	80077d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800777e:	4a18      	ldr	r2, [pc, #96]	; (80077e0 <USBH_LL_Init+0x74>)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <USBH_LL_Init+0x74>)
 800778a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <USBH_LL_Init+0x74>)
 8007790:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007794:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <USBH_LL_Init+0x74>)
 8007798:	2208      	movs	r2, #8
 800779a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <USBH_LL_Init+0x74>)
 800779e:	2201      	movs	r2, #1
 80077a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <USBH_LL_Init+0x74>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <USBH_LL_Init+0x74>)
 80077aa:	2202      	movs	r2, #2
 80077ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <USBH_LL_Init+0x74>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80077b4:	480a      	ldr	r0, [pc, #40]	; (80077e0 <USBH_LL_Init+0x74>)
 80077b6:	f7f9 feae 	bl	8001516 <HAL_HCD_Init>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80077c0:	f7f9 f8e6 	bl	8000990 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80077c4:	4806      	ldr	r0, [pc, #24]	; (80077e0 <USBH_LL_Init+0x74>)
 80077c6:	f7fa fa92 	bl	8001cee <HAL_HCD_GetCurrentFrame>
 80077ca:	4603      	mov	r3, r0
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe ff68 	bl	80066a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200005cc 	.word	0x200005cc

080077e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fa fa01 	bl	8001c02 <HAL_HCD_Start>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f95c 	bl	8007ac4 <USBH_Get_USB_Status>
 800780c:	4603      	mov	r3, r0
 800780e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007810:	7bbb      	ldrb	r3, [r7, #14]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fa09 	bl	8001c48 <HAL_HCD_Stop>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f941 	bl	8007ac4 <USBH_Get_USB_Status>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007846:	7bbb      	ldrb	r3, [r7, #14]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007862:	4618      	mov	r0, r3
 8007864:	f7fa fa51 	bl	8001d0a <HAL_HCD_GetCurrentSpeed>
 8007868:	4603      	mov	r3, r0
 800786a:	2b02      	cmp	r3, #2
 800786c:	d00c      	beq.n	8007888 <USBH_LL_GetSpeed+0x38>
 800786e:	2b02      	cmp	r3, #2
 8007870:	d80d      	bhi.n	800788e <USBH_LL_GetSpeed+0x3e>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <USBH_LL_GetSpeed+0x2c>
 8007876:	2b01      	cmp	r3, #1
 8007878:	d003      	beq.n	8007882 <USBH_LL_GetSpeed+0x32>
 800787a:	e008      	b.n	800788e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	e008      	b.n	8007894 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007882:	2301      	movs	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
    break;
 8007886:	e005      	b.n	8007894 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007888:	2302      	movs	r3, #2
 800788a:	73fb      	strb	r3, [r7, #15]
    break;
 800788c:	e002      	b.n	8007894 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800788e:	2301      	movs	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
    break;
 8007892:	bf00      	nop
  }
  return  speed;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fa f9e4 	bl	8001c82 <HAL_HCD_ResetPort>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 f8ff 	bl	8007ac4 <USBH_Get_USB_Status>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078e6:	78fa      	ldrb	r2, [r7, #3]
 80078e8:	4611      	mov	r1, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fa f9eb 	bl	8001cc6 <HAL_HCD_HC_GetXferCount>
 80078f0:	4603      	mov	r3, r0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80078fa:	b590      	push	{r4, r7, lr}
 80078fc:	b089      	sub	sp, #36	; 0x24
 80078fe:	af04      	add	r7, sp, #16
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	4608      	mov	r0, r1
 8007904:	4611      	mov	r1, r2
 8007906:	461a      	mov	r2, r3
 8007908:	4603      	mov	r3, r0
 800790a:	70fb      	strb	r3, [r7, #3]
 800790c:	460b      	mov	r3, r1
 800790e:	70bb      	strb	r3, [r7, #2]
 8007910:	4613      	mov	r3, r2
 8007912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007922:	787c      	ldrb	r4, [r7, #1]
 8007924:	78ba      	ldrb	r2, [r7, #2]
 8007926:	78f9      	ldrb	r1, [r7, #3]
 8007928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	4623      	mov	r3, r4
 800793a:	f7f9 fe4e 	bl	80015da <HAL_HCD_HC_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f8bd 	bl	8007ac4 <USBH_Get_USB_Status>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800794e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	bd90      	pop	{r4, r7, pc}

08007958 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 febe 	bl	80016f8 <HAL_HCD_HC_Halt>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f89e 	bl	8007ac4 <USBH_Get_USB_Status>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798c:	7bbb      	ldrb	r3, [r7, #14]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007996:	b590      	push	{r4, r7, lr}
 8007998:	b089      	sub	sp, #36	; 0x24
 800799a:	af04      	add	r7, sp, #16
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	461a      	mov	r2, r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	70fb      	strb	r3, [r7, #3]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70bb      	strb	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80079be:	787c      	ldrb	r4, [r7, #1]
 80079c0:	78ba      	ldrb	r2, [r7, #2]
 80079c2:	78f9      	ldrb	r1, [r7, #3]
 80079c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079c8:	9303      	str	r3, [sp, #12]
 80079ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079cc:	9302      	str	r3, [sp, #8]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	4623      	mov	r3, r4
 80079da:	f7f9 feb1 	bl	8001740 <HAL_HCD_HC_SubmitRequest>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 f86d 	bl	8007ac4 <USBH_Get_USB_Status>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd90      	pop	{r4, r7, pc}

080079f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fa f945 	bl	8001c9e <HAL_HCD_HC_GetURBState>
 8007a14:	4603      	mov	r3, r0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d103      	bne.n	8007a3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f870 	bl	8007b1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007a3c:	20c8      	movs	r0, #200	; 0xc8
 8007a3e:	f7f9 fa59 	bl	8000ef4 <HAL_Delay>
  return USBH_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	212c      	movs	r1, #44	; 0x2c
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	333b      	adds	r3, #59	; 0x3b
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	212c      	movs	r1, #44	; 0x2c
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	3354      	adds	r3, #84	; 0x54
 8007a86:	78ba      	ldrb	r2, [r7, #2]
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e008      	b.n	8007a9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	212c      	movs	r1, #44	; 0x2c
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	3355      	adds	r3, #85	; 0x55
 8007a9a:	78ba      	ldrb	r2, [r7, #2]
 8007a9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7f9 fa1d 	bl	8000ef4 <HAL_Delay>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d817      	bhi.n	8007b08 <USBH_Get_USB_Status+0x44>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <USBH_Get_USB_Status+0x1c>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007af1 	.word	0x08007af1
 8007ae4:	08007af7 	.word	0x08007af7
 8007ae8:	08007afd 	.word	0x08007afd
 8007aec:	08007b03 	.word	0x08007b03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
    break;
 8007af4:	e00b      	b.n	8007b0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007af6:	2302      	movs	r3, #2
 8007af8:	73fb      	strb	r3, [r7, #15]
    break;
 8007afa:	e008      	b.n	8007b0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007afc:	2301      	movs	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
    break;
 8007b00:	e005      	b.n	8007b0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007b02:	2302      	movs	r3, #2
 8007b04:	73fb      	strb	r3, [r7, #15]
    break;
 8007b06:	e002      	b.n	8007b0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b0c:	bf00      	nop
  }
  return usb_status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e001      	b.n	8007b3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007b36:	2301      	movs	r3, #1
 8007b38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	2101      	movs	r1, #1
 8007b40:	4803      	ldr	r0, [pc, #12]	; (8007b50 <MX_DriverVbusFS+0x34>)
 8007b42:	f7f9 fc91 	bl	8001468 <HAL_GPIO_WritePin>
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40020800 	.word	0x40020800

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	; (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000002c 	.word	0x2000002c

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4d0d      	ldr	r5, [pc, #52]	; (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	; (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4d0b      	ldr	r5, [pc, #44]	; (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	; (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f000 f92e 	bl	8007dd4 <_init>
 8007b78:	1b64      	subs	r4, r4, r5
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	08007e10 	.word	0x08007e10
 8007b9c:	08007e10 	.word	0x08007e10
 8007ba0:	08007e10 	.word	0x08007e10
 8007ba4:	08007e14 	.word	0x08007e14

08007ba8 <malloc>:
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <malloc+0xc>)
 8007baa:	4601      	mov	r1, r0
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	f000 b87f 	b.w	8007cb0 <_malloc_r>
 8007bb2:	bf00      	nop
 8007bb4:	2000002c 	.word	0x2000002c

08007bb8 <free>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <free+0xc>)
 8007bba:	4601      	mov	r1, r0
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f000 b80b 	b.w	8007bd8 <_free_r>
 8007bc2:	bf00      	nop
 8007bc4:	2000002c 	.word	0x2000002c

08007bc8 <memset>:
 8007bc8:	4402      	add	r2, r0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d100      	bne.n	8007bd2 <memset+0xa>
 8007bd0:	4770      	bx	lr
 8007bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd6:	e7f9      	b.n	8007bcc <memset+0x4>

08007bd8 <_free_r>:
 8007bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	d044      	beq.n	8007c68 <_free_r+0x90>
 8007bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be2:	9001      	str	r0, [sp, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f1a1 0404 	sub.w	r4, r1, #4
 8007bea:	bfb8      	it	lt
 8007bec:	18e4      	addlt	r4, r4, r3
 8007bee:	f000 f8e3 	bl	8007db8 <__malloc_lock>
 8007bf2:	4a1e      	ldr	r2, [pc, #120]	; (8007c6c <_free_r+0x94>)
 8007bf4:	9801      	ldr	r0, [sp, #4]
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	b933      	cbnz	r3, 8007c08 <_free_r+0x30>
 8007bfa:	6063      	str	r3, [r4, #4]
 8007bfc:	6014      	str	r4, [r2, #0]
 8007bfe:	b003      	add	sp, #12
 8007c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c04:	f000 b8de 	b.w	8007dc4 <__malloc_unlock>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d908      	bls.n	8007c1e <_free_r+0x46>
 8007c0c:	6825      	ldr	r5, [r4, #0]
 8007c0e:	1961      	adds	r1, r4, r5
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf01      	itttt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	1949      	addeq	r1, r1, r5
 8007c1a:	6021      	streq	r1, [r4, #0]
 8007c1c:	e7ed      	b.n	8007bfa <_free_r+0x22>
 8007c1e:	461a      	mov	r2, r3
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	b10b      	cbz	r3, 8007c28 <_free_r+0x50>
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d9fa      	bls.n	8007c1e <_free_r+0x46>
 8007c28:	6811      	ldr	r1, [r2, #0]
 8007c2a:	1855      	adds	r5, r2, r1
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	d10b      	bne.n	8007c48 <_free_r+0x70>
 8007c30:	6824      	ldr	r4, [r4, #0]
 8007c32:	4421      	add	r1, r4
 8007c34:	1854      	adds	r4, r2, r1
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	6011      	str	r1, [r2, #0]
 8007c3a:	d1e0      	bne.n	8007bfe <_free_r+0x26>
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	6053      	str	r3, [r2, #4]
 8007c42:	4421      	add	r1, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	e7da      	b.n	8007bfe <_free_r+0x26>
 8007c48:	d902      	bls.n	8007c50 <_free_r+0x78>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	e7d6      	b.n	8007bfe <_free_r+0x26>
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	1961      	adds	r1, r4, r5
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf04      	itt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	6063      	str	r3, [r4, #4]
 8007c5e:	bf04      	itt	eq
 8007c60:	1949      	addeq	r1, r1, r5
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	6054      	str	r4, [r2, #4]
 8007c66:	e7ca      	b.n	8007bfe <_free_r+0x26>
 8007c68:	b003      	add	sp, #12
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	200008d0 	.word	0x200008d0

08007c70 <sbrk_aligned>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4e0e      	ldr	r6, [pc, #56]	; (8007cac <sbrk_aligned+0x3c>)
 8007c74:	460c      	mov	r4, r1
 8007c76:	6831      	ldr	r1, [r6, #0]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	b911      	cbnz	r1, 8007c82 <sbrk_aligned+0x12>
 8007c7c:	f000 f88c 	bl	8007d98 <_sbrk_r>
 8007c80:	6030      	str	r0, [r6, #0]
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f887 	bl	8007d98 <_sbrk_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d00a      	beq.n	8007ca4 <sbrk_aligned+0x34>
 8007c8e:	1cc4      	adds	r4, r0, #3
 8007c90:	f024 0403 	bic.w	r4, r4, #3
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d007      	beq.n	8007ca8 <sbrk_aligned+0x38>
 8007c98:	1a21      	subs	r1, r4, r0
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f87c 	bl	8007d98 <_sbrk_r>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d101      	bne.n	8007ca8 <sbrk_aligned+0x38>
 8007ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ca8:	4620      	mov	r0, r4
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	200008d4 	.word	0x200008d4

08007cb0 <_malloc_r>:
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	1ccd      	adds	r5, r1, #3
 8007cb6:	f025 0503 	bic.w	r5, r5, #3
 8007cba:	3508      	adds	r5, #8
 8007cbc:	2d0c      	cmp	r5, #12
 8007cbe:	bf38      	it	cc
 8007cc0:	250c      	movcc	r5, #12
 8007cc2:	2d00      	cmp	r5, #0
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	db01      	blt.n	8007ccc <_malloc_r+0x1c>
 8007cc8:	42a9      	cmp	r1, r5
 8007cca:	d905      	bls.n	8007cd8 <_malloc_r+0x28>
 8007ccc:	230c      	movs	r3, #12
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd8:	4e2e      	ldr	r6, [pc, #184]	; (8007d94 <_malloc_r+0xe4>)
 8007cda:	f000 f86d 	bl	8007db8 <__malloc_lock>
 8007cde:	6833      	ldr	r3, [r6, #0]
 8007ce0:	461c      	mov	r4, r3
 8007ce2:	bb34      	cbnz	r4, 8007d32 <_malloc_r+0x82>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ffc2 	bl	8007c70 <sbrk_aligned>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	4604      	mov	r4, r0
 8007cf0:	d14d      	bne.n	8007d8e <_malloc_r+0xde>
 8007cf2:	6834      	ldr	r4, [r6, #0]
 8007cf4:	4626      	mov	r6, r4
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d140      	bne.n	8007d7c <_malloc_r+0xcc>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4638      	mov	r0, r7
 8007d00:	eb04 0803 	add.w	r8, r4, r3
 8007d04:	f000 f848 	bl	8007d98 <_sbrk_r>
 8007d08:	4580      	cmp	r8, r0
 8007d0a:	d13a      	bne.n	8007d82 <_malloc_r+0xd2>
 8007d0c:	6821      	ldr	r1, [r4, #0]
 8007d0e:	3503      	adds	r5, #3
 8007d10:	1a6d      	subs	r5, r5, r1
 8007d12:	f025 0503 	bic.w	r5, r5, #3
 8007d16:	3508      	adds	r5, #8
 8007d18:	2d0c      	cmp	r5, #12
 8007d1a:	bf38      	it	cc
 8007d1c:	250c      	movcc	r5, #12
 8007d1e:	4629      	mov	r1, r5
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7ff ffa5 	bl	8007c70 <sbrk_aligned>
 8007d26:	3001      	adds	r0, #1
 8007d28:	d02b      	beq.n	8007d82 <_malloc_r+0xd2>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	442b      	add	r3, r5
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	e00e      	b.n	8007d50 <_malloc_r+0xa0>
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	1b52      	subs	r2, r2, r5
 8007d36:	d41e      	bmi.n	8007d76 <_malloc_r+0xc6>
 8007d38:	2a0b      	cmp	r2, #11
 8007d3a:	d916      	bls.n	8007d6a <_malloc_r+0xba>
 8007d3c:	1961      	adds	r1, r4, r5
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	6025      	str	r5, [r4, #0]
 8007d42:	bf18      	it	ne
 8007d44:	6059      	strne	r1, [r3, #4]
 8007d46:	6863      	ldr	r3, [r4, #4]
 8007d48:	bf08      	it	eq
 8007d4a:	6031      	streq	r1, [r6, #0]
 8007d4c:	5162      	str	r2, [r4, r5]
 8007d4e:	604b      	str	r3, [r1, #4]
 8007d50:	4638      	mov	r0, r7
 8007d52:	f104 060b 	add.w	r6, r4, #11
 8007d56:	f000 f835 	bl	8007dc4 <__malloc_unlock>
 8007d5a:	f026 0607 	bic.w	r6, r6, #7
 8007d5e:	1d23      	adds	r3, r4, #4
 8007d60:	1af2      	subs	r2, r6, r3
 8007d62:	d0b6      	beq.n	8007cd2 <_malloc_r+0x22>
 8007d64:	1b9b      	subs	r3, r3, r6
 8007d66:	50a3      	str	r3, [r4, r2]
 8007d68:	e7b3      	b.n	8007cd2 <_malloc_r+0x22>
 8007d6a:	6862      	ldr	r2, [r4, #4]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	bf0c      	ite	eq
 8007d70:	6032      	streq	r2, [r6, #0]
 8007d72:	605a      	strne	r2, [r3, #4]
 8007d74:	e7ec      	b.n	8007d50 <_malloc_r+0xa0>
 8007d76:	4623      	mov	r3, r4
 8007d78:	6864      	ldr	r4, [r4, #4]
 8007d7a:	e7b2      	b.n	8007ce2 <_malloc_r+0x32>
 8007d7c:	4634      	mov	r4, r6
 8007d7e:	6876      	ldr	r6, [r6, #4]
 8007d80:	e7b9      	b.n	8007cf6 <_malloc_r+0x46>
 8007d82:	230c      	movs	r3, #12
 8007d84:	603b      	str	r3, [r7, #0]
 8007d86:	4638      	mov	r0, r7
 8007d88:	f000 f81c 	bl	8007dc4 <__malloc_unlock>
 8007d8c:	e7a1      	b.n	8007cd2 <_malloc_r+0x22>
 8007d8e:	6025      	str	r5, [r4, #0]
 8007d90:	e7de      	b.n	8007d50 <_malloc_r+0xa0>
 8007d92:	bf00      	nop
 8007d94:	200008d0 	.word	0x200008d0

08007d98 <_sbrk_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d06      	ldr	r5, [pc, #24]	; (8007db4 <_sbrk_r+0x1c>)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	602b      	str	r3, [r5, #0]
 8007da4:	f7f8 ffc2 	bl	8000d2c <_sbrk>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_sbrk_r+0x1a>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_sbrk_r+0x1a>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	200008d8 	.word	0x200008d8

08007db8 <__malloc_lock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__malloc_lock+0x8>)
 8007dba:	f000 b809 	b.w	8007dd0 <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200008dc 	.word	0x200008dc

08007dc4 <__malloc_unlock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__malloc_unlock+0x8>)
 8007dc6:	f000 b804 	b.w	8007dd2 <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	200008dc 	.word	0x200008dc

08007dd0 <__retarget_lock_acquire_recursive>:
 8007dd0:	4770      	bx	lr

08007dd2 <__retarget_lock_release_recursive>:
 8007dd2:	4770      	bx	lr

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr
